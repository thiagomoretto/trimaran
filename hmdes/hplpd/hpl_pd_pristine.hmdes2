
/////////////////////////////////////////////////////////////////////////////
//
//      File:           hpl_pd_pristine.hmdes2
//      Authors:        Shail Aditya
//      Created:        January, 1996
//      Description:    HPL-PD Architecture Description
//
/////////////////////////////////////////////////////////////////////////////
// HPL-PD Machine Architecture Description (IFMB model)

// Preliminary conversion of PLAYDOH.hmdes1 to hmdes2 format.
// Written by Shail Aditya 01/16/96
// Based on John C. Gyllenhaal's example of PA_7100_pristine.hmdes2
// Based on Rick Hank's PLAYDOH.hmdes1

// Modified by Shail Aditya 3/3/98 
// Updated to conform to exact HPL-PD opcodes and IO Formats
// Based on Vinod Kathail's HPL-PD ISA specification

// **************************************************************
// Registers and Register Files

$def byte_size 8
$def hw_size   16
$def word_size 32
$def sgl_size  32
$def dbl_size  64

$def speculation 1

$def !num_int_param_reg 4
$def !num_flt_param_reg 4
$def !num_dbl_param_reg 4
$def !num_pv_reg	8

SECTION Register_Class
{
  CALLER();
  CALLEE();
}

SECTION Stack_Descr
{
  STACK_DESCR(
    Dir("HIGH_TO_LOW")          // HIGH_TO_LOW or LOW_TO_HIGH
    RetAddrThruStack("true")    // true or false
    RetAddrSize(4) 
    Alignment(8)
  );
}

SECTION Macro_Class {
  READ_ONLY();
  PSEUDO();
  ALIAS();
  MULTI_ALIAS();
  COHERENT();
  PV();        
}

SECTION Macro
{
  LOCAL(class(PSEUDO));
  PARAM(class(PSEUDO));
  SWAP(class(PSEUDO));
  INT_RETURN_TYPE(class(PSEUDO));
  FLT_RETURN_TYPE(class(PSEUDO));
  DBL_RETURN_TYPE(class(PSEUDO));
  INT_RETURN();
  $for (N in $1..(num_int_param_reg)) { "INT_PARAM_${N}"(); }
  FLT_RETURN();
  $for (N in $1..(num_flt_param_reg)) { "FLT_PARAM_${N}"(); }  
  DBL_RETURN();
  $for (N in $1..(num_dbl_param_reg)) { "DBL_PARAM_${N}"(); }  
  INT_TM_TYPE(class(PSEUDO));
  FLT_TM_TYPE(class(PSEUDO));
  DBL_TM_TYPE(class(PSEUDO));
  SP_REG(class(COHERENT));				// Stack pointer
  FP_REG();				// Frame pointer
  IP_REG(alias(SP_REG));		// Incoming parameter space
  OP_REG(alias(SP_REG));		// Outgoing parameter space
  LV_REG(alias(SP_REG));		// Local variable space
  RGS_REG(alias(SP_REG));		// Register swap space
  LC_REG();				// Loop Counter
  ESC_REG();				// Epilogue stage counter
  ALL_ROT_PRED(class(MULTI_ALIAS));	// All the rotating predicate registers
  ALL_PRED(class(MULTI_ALIAS));	        // The entire predicate register file
  ALL_STATIC_PRED(class(MULTI_ALIAS));	
  RRB();	
  RETURN_ADDR();
  FLT_ZERO(class(READ_ONLY));
  FLT_ONE(class(READ_ONLY));
  DBL_ZERO(class(READ_ONLY));
  DBL_ONE(class(READ_ONLY));
  INT_ZERO(class(READ_ONLY));
  PRED_FALSE(class(READ_ONLY));
  PRED_TRUE(class(READ_ONLY));
  ICMOVE_REG();
  $for (N in $0..(num_pv_reg-1)) { "PV_${N}"(class(PV MULTI_ALIAS)); }  
  // for vectors -KF 1/2007
  VEC_MASK_TRUE(class(READ_ONLY));
  VEC_SCRATCH_PAD();
}

SECTION Register
{
  // For loop defines all registers

  $for (clust in $0..(num_clusters-1)) {	
    $for (N in $0..(gpr_static_size/2-1)) { "GPR_${clust}_${N}"(class(CALLER)); }
    $for (N in $(gpr_static_size/2)..(gpr_static_size-1)) { "GPR_${clust}_${N}"(class(CALLEE)); }
    $for (N in $0..(gpr_rotating_size-1)) { "GPR_${clust}[${N}]"(); }
	
    $for (N in $0..(fpr_static_size-1)) { "FPR_${clust}_${N}"(class(CALLER)); }
    $for (N in $0..(fpr_rotating_size-1)) { "FPR_${clust}[${N}]"(); }

    $for (N in $0..(pr_static_size-1)) { "PR_${clust}_${N}"(class(CALLEE)); }
    $for (N in $0..(pr_rotating_size-1)) { "PR_${clust}[${N}]"(); }

    $for (N in $0..(btr_static_size-1)) { "BTR_${clust}_${N}"(class(CALLER)); }

    // TBD: need to use control register names from the HPL-PD manual
    // and define their aliasing relationship with other registers.
    $for (N in $0..(cr_static_size-1)) { "CR_${clust}_${N}"(class(CALLER)); }

    // SLARSEN: Vector registers
    $for (N in $0..(vir_static_size-1)) { "VIR_${clust}_${N}"(class(CALLER)); }
    $for (N in $0..(vir_rotating_size-1)) { "VIR_${clust}[${N}]"(); }

    $for (N in $0..(vfr_static_size-1)) { "VFR_${clust}_${N}"(class(CALLER)); }
    $for (N in $0..(vfr_rotating_size-1)) { "VFR_${clust}[${N}]"(); }

    $for (N in $0..(vmr_static_size-1)) { "VMR_${clust}_${N}"(class(CALLER)); }
    $for (N in $0..(vmr_rotating_size-1)) { "VMR_${clust}[${N}]"(); }
  }

  // ORing other attributes (macro definitions) to registers defined above.

  'GPR_0_0'  (macro || (SP_REG));
  'GPR_0_1'  (macro || (FP_REG));

  'GPR_0_10'  (macro || (INT_ZERO));	
  'GPR_0_11'  (macro || (INT_PARAM_1));	
  'GPR_0_12'  (macro || (INT_PARAM_2));	
  'GPR_0_13'  (macro || (INT_PARAM_3));	
  'GPR_0_14'  (macro || (INT_PARAM_4));	
  'GPR_0_16'  (macro || (INT_RETURN));	
//  'GPR_0_15'  (macro || (INT_RETURN));	Use this for 16-element RF
  
  'CR_0_0' (macro || (LC_REG));
  'CR_0_1' (macro || (ESC_REG));
  //  'PR_0_0' (macro || (ALL_ROT_PRED));
  $for (clust in $0..(num_clusters-1)) {
    $for (N in $0..(pr_rotating_size-1)) { 
      "PR_${clust}[${N}]"  (macro || (ALL_ROT_PRED));
    }
  }

  $for (clust in $0..(num_clusters-1)) {
    $for (P in $0..7) {
      $for (N in $$={${P} * 32}..$={(${P}+1) * 32 - 1}) {
        "PR_${clust}_${N}"  (macro || (PV_${P}));
      }
    }
  }

  'FPR_0_0'  (macro || (FLT_ZERO));
  'FPR_0_1'  (macro || (FLT_PARAM_1));
  'FPR_0_2'  (macro || (FLT_PARAM_2));
  'FPR_0_3'  (macro || (FLT_PARAM_3));
  'FPR_0_4'  (macro || (FLT_PARAM_4));
  'FPR_0_5'  (macro || (FLT_RETURN));
  'FPR_0_6'  (macro || (FLT_ONE));
	 	
  'BTR_0_1'  (macro || (RETURN_ADDR));
	
  'FPR_0_20' (macro || (DBL_ZERO));	
  'FPR_0_21' (macro || (DBL_PARAM_1));	
  'FPR_0_22' (macro || (DBL_PARAM_2));		
  'FPR_0_23' (macro || (DBL_PARAM_3));	
  'FPR_0_24' (macro || (DBL_PARAM_4));		
  'FPR_0_25' (macro || (DBL_RETURN));	
  'FPR_0_26'  (macro || (DBL_ONE));

//  use the ones below for 16-element RF
//  'FPR_0_9' (macro || (DBL_ZERO));	
//  'FPR_0_10' (macro || (DBL_PARAM_1));	
//  'FPR_0_11' (macro || (DBL_PARAM_2));		
//  'FPR_0_12' (macro || (DBL_PARAM_3));	
//  'FPR_0_13' (macro || (DBL_PARAM_4));		
//  'FPR_0_14' (macro || (DBL_RETURN));	
//  'FPR_0_15'  (macro || (DBL_ONE));



  // Reserve the ICMOVE_REG
  $for (clust in $0..(num_clusters-1)) {
    "GPR_${clust}_7"  (macro || (ICMOVE_REG));
    "FPR_${clust}_7"  (macro || (ICMOVE_REG));
    "BTR_${clust}_7"  (macro || (ICMOVE_REG));
    "PR_${clust}_1"   (macro || (ICMOVE_REG));
  }

  // for vectors.  pick any register, shouldn't matter.
  'VMR_0_0' (macro || (VEC_MASK_TRUE));
  'GPR_0_2' (macro || (VEC_SCRATCH_PAD));
}

SECTION Constant_Range
{
  // HPL-PD 2.0 extn
  $def max_short  $={1<<(${short_lit_size}-1)}
  $def max_memory $={1<<(${memory_lit_size}-1)}
  $def max_branch $={1<<(${branch_lit_size}-1)}
  $def max_long   $={1<<(${long_lit_size}-1)}
  $def max_unrestricted   $={1<<(32-1)}

  short_lit_range (min($={0-${max_short}})  max($={${max_short}-1})  step(1));
  memory_lit_range(min($={0-${max_memory}}) max($={${max_memory}-1}) step(1));
  branch_lit_range(min($={0-${max_branch}}) max($={${max_branch}-1}) step(1));
  long_lit_range  (min($={0-${max_long}})   max($={${max_long}-1})   step(1));
  unrest_lit_range(min($={0-${max_unrestricted}}) 
		  max($={${max_unrestricted}-1}) step(1));
}

SECTION Constant_Set
{
  short_set (ranges(short_lit_range));
  memory_set(ranges(memory_lit_range));
  branch_set(ranges(branch_lit_range));
  long_set  (ranges(long_lit_range));
  unrest_set(ranges(unrest_lit_range));
}

SECTION Register_File
{
  $for (clust in $0..(num_clusters-1)) {	
    GPR_${clust}(static($for (N in $0..(gpr_static_size-1)) { "GPR_${clust}_${N}" })
      	         rotating($for (N in $0..(gpr_rotating_size-1)) { "GPR_${clust}[${N}]" }) 
                 width(${word_size}) speculative(${speculation}) virtual(I));

    FPR_${clust}(static($for (N in $0..(fpr_static_size-1)) { "FPR_${clust}_${N}" })
                 rotating($for (N in $0..(fpr_rotating_size-1)) { "FPR_${clust}[${N}]" }) 
                 width(${dbl_size}) speculative(${speculation}) virtual(F));

    PR_${clust}(static($for (N in $0..(pr_static_size-1)) { "PR_${clust}_${N}" })
                 rotating($for (N in $0..(pr_rotating_size-1)) { "PR_${clust}[${N}]" }) 
                 width(1) speculative(${speculation}) virtual(P));

    BTR_${clust}(static($for (N in $0..(btr_static_size-1)) { "BTR_${clust}_${N}" })
                 rotating() width(${dbl_size}) speculative(0) virtual(B));

    CR_${clust}(static($for (N in $0..(cr_static_size-1)) { "CR_${clust}_${N}" })
                rotating() width(${word_size}) speculative(0) virtual(C));

    // SLARSEN: Vector register files
    VIR_${clust}(static($for (N in $0..(vir_static_size-1)) { "VIR_${clust}_${N}" })
        rotating($for (N in $0..(vir_rotating_size-1)) { "VIR_${clust}[${N}]" }) 
        width(${word_size}) vector_length(${vec_length}) speculative(${speculation}) virtual(X));

    VFR_${clust}(static($for (N in $0..(vfr_static_size-1)) { "VFR_${clust}_${N}" })
        rotating($for (N in $0..(vfr_rotating_size-1)) { "VFR_${clust}[${N}]" }) 
        width(${dbl_size}) vector_length(${vec_length}) speculative(${speculation}) virtual(Y));

    VMR_${clust}(static($for (N in $0..(vmr_static_size-1)) { "VMR_${clust}_${N}" })
        rotating($for (N in $0..(vmr_rotating_size-1)) { "VMR_${clust}[${N}]" }) 
        width(1) vector_length(${vec_length}) speculative(${speculation}) virtual(Z));

  }

//  L(width(0) speculative(0) virtual(L));
  U(width(0) speculative(0) virtual(U));

  s(width(short_lit_size) virtual(L) consts(short_set));
  m(width(memory_lit_size) virtual(L) consts(memory_set));
  n(width(branch_lit_size) virtual(L) consts(branch_set));
  o(width(long_lit_size) virtual(L) consts(long_set));
  l(width(unrestricted_lit_size) virtual(L) consts(unrest_set));

}

// **************************************************************
// Operation Formats (IO Descriptors)

SECTION Field_Type
{
  $for (clust in $0..(num_clusters-1)) {
    FT_i_${clust}(regfile(GPR_${clust}));
    FT_f_${clust}(regfile(FPR_${clust}));
    FT_p_${clust}(regfile(PR_${clust}));
    FT_c_${clust}(regfile(CR_${clust}));
    FT_b_${clust}(regfile(BTR_${clust}));
  }

  FT_l(regfile(l));
  FT_u(regfile(U));
  // HPL-PD 2.0 extn
  FT_s(regfile(s));
  FT_m(regfile(m));
  FT_n(regfile(n));
  FT_o(regfile(o));
 
  $for (clust in $0..(num_clusters-1)) {
    FT_ic_${clust}(compatible_with(FT_i_${clust} FT_c_${clust}));
    FT_icu_${clust}(compatible_with(FT_i_${clust} FT_c_${clust} FT_u));
    FT_il_${clust}(compatible_with(FT_i_${clust} FT_l));
 
    FT_icb_${clust}(compatible_with(FT_i_${clust} FT_c_${clust} FT_b_${clust}));
    FT_icp_${clust}(compatible_with(FT_i_${clust} FT_c_${clust} FT_p_${clust}));
    FT_icl_${clust}(compatible_with(FT_i_${clust} FT_c_${clust} FT_l));
    FT_ilb_${clust}(compatible_with(FT_i_${clust} FT_l FT_b_${clust}));
    FT_iclb_${clust}(compatible_with(FT_i_${clust} FT_c_${clust} FT_l FT_b_${clust}));
    FT_ifc_${clust}(compatible_with(FT_i_${clust} FT_f_${clust} FT_c_${clust}));
    FT_ifcl_${clust}(compatible_with(FT_i_${clust} FT_f_${clust} FT_c_${clust} FT_l));

    // SLARSEN: Vector field types
    FT_I_${clust}(regfile(VIR_${clust}));
    FT_F_${clust}(regfile(VFR_${clust}));
    FT_M_${clust}(regfile(VMR_${clust}));
    FT_Il_${clust}(compatible_with(FT_I_${clust} FT_l));

    FT_icfbpu_${clust}(compatible_with(FT_i_${clust} FT_c_${clust} FT_f_${clust} FT_b_${clust} FT_p_${clust} FT_u FT_I_${clust} FT_F_${clust} FT_M_${clust}));
    FT_icfbplu_${clust}(compatible_with(FT_i_${clust} FT_c_${clust} FT_f_${clust} FT_b_${clust} FT_p_${clust} FT_l FT_u FT_I_${clust} FT_F_${clust} FT_M_${clust}));
  }

  // Create field types compatible for all clusters for dummy ops.
  FT_p_all(compatible_with (
    $for (clust in $0..(num_clusters-1)) {	
	FT_p_${clust}})
  );
  FT_i_all(compatible_with (
    $for (clust in $0..(num_clusters-1)) {	
	FT_i_${clust}})
  );
  FT_ifcl_all(compatible_with (
    $for (clust in $0..(num_clusters-1)) {	
	FT_i_${clust} FT_c_${clust} FT_f_${clust} 
    }
    FT_l)
  );

  FT_icfbpu_all(compatible_with (
    $for (clust in $0..(num_clusters-1)) {	
	FT_i_${clust} FT_c_${clust} FT_f_${clust} FT_b_${clust} FT_p_${clust} FT_I_${clust} FT_F_${clust} FT_M_${clust}
    }
    FT_u)
  );
  FT_icfbplu_all(compatible_with(
    $for (clust in $0..(num_clusters-1)) {	
 	FT_i_${clust} FT_c_${clust} FT_f_${clust} FT_b_${clust} FT_p_${clust} FT_I_${clust} FT_F_${clust} FT_M_${clust}
    }
    FT_l FT_u)
  );

}

SECTION Operation_Format
{
  $for (clust in $0..(num_clusters-1)) {

    OF_intarith1_${clust}(pred(FT_p_${clust}) src(FT_icl_${clust}) dest(FT_ic_${clust}));
    OF_intarith2_${clust}(pred(FT_p_${clust}) src(FT_icl_${clust} FT_icl_${clust}) dest(FT_ic_${clust}));
    OF_intarith2_wide_${clust}(pred(FT_p_${clust}) src(FT_icl_${clust} FT_icl_${clust}) dest(FT_icu_${clust} FT_ic_${clust}));
    OF_intarith3_${clust}(pred(FT_p_${clust}) src(FT_icl_${clust} FT_icl_${clust} FT_icl_${clust}) dest(FT_ic_${clust}));
    OF_intarith3_wide_${clust}(pred(FT_p_${clust}) src(FT_icl_${clust} FT_icl_${clust} FT_icl_${clust}) dest(FT_ic_${clust} FT_icu_${clust}));
    OF_intcmpr_${clust}(pred(FT_p_${clust}) src(FT_icl_${clust} FT_icl_${clust}) dest(FT_i_${clust}));
    OF_intcmpp_${clust}(pred(FT_p_${clust}) src(FT_icl_${clust} FT_icl_${clust}) dest(FT_p_${clust} FT_p_${clust}));
    // HPL-PD 2.0 Extn: One target compare-to-predicate operation
    // OF_intcmppi(pred(FT_p) src(FT_il FT_il) dest(FT_p));

    OF_floatarith1_${clust}(pred(FT_p_${clust}) src(FT_f_${clust}) dest(FT_f_${clust}));
    OF_floatarith2_${clust}(pred(FT_p_${clust}) src(FT_f_${clust} FT_f_${clust}) dest(FT_f_${clust}));
    OF_floatarith3_${clust}(pred(FT_p_${clust}) src(FT_f_${clust} FT_f_${clust} FT_f_${clust}) dest(FT_f_${clust}));
    OF_floatcmpr_${clust}(pred(FT_p_${clust}) src(FT_f_${clust} FT_f_${clust}) dest(FT_i_${clust}));
    OF_floatcmpp_${clust}(pred(FT_p_${clust}) src(FT_f_${clust} FT_f_${clust}) dest(FT_p_${clust} FT_p_${clust}));
    // HPL-PD 2.0 Extn: One target compare-to-predicate operation
    // OF_floatcmppi(pred(FT_p) src(FT_f FT_f) dest(FT_p));

    // TBD: B as destination for BTR save/restore
    OF_intload_${clust}(pred(FT_p_${clust}) src(FT_i_${clust}) dest(FT_icb_${clust}));
    OF_floatload_${clust}(pred(FT_p_${clust}) src(FT_il_${clust}) dest(FT_f_${clust}));
    OF_intloadinc_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_icl_${clust}) dest(FT_icb_${clust} FT_i_${clust}));
    OF_intloadgdisp_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust}) dest(FT_icb_${clust}));
    
    /*new integer load w/ sign extension LGX, LMX and LX (tangw 05-17-02)*/
    OF_intloadext_${clust}(pred(FT_p_${clust}) src(FT_i_${clust}) dest(FT_icb_${clust}));
    OF_intloadgdispext_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust}) dest(FT_icb_${clust}));

    /*new floating point load FG & FM (tangw 05-17-02)*/	
    OF_floatloadgdisp_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust}) dest(FT_f_${clust}));

    OF_floatloadinc_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_icl_${clust}) dest(FT_f_${clust} FT_i_${clust}));

    // TBD: B as source for BTR save/restore
    OF_intstore_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_iclb_${clust}) dest());  
    OF_floatstore_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_f_${clust}) dest());  
    OF_intstoreinc_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_iclb_${clust} FT_icl_${clust}) dest(FT_i_${clust}));
    OF_floatstoreinc_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_f_${clust} FT_icl_${clust}) dest(FT_i_${clust}));

    /*new integer store operations SG & SM & floating point store FLM & FLG(tangw 05-17-02)*/
    OF_intstoregdisp_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_iclb_${clust}) dest());
    OF_floatstoregdisp_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_f_${clust}) dest());

    OF_predload_${clust}(pred(FT_p_${clust}) src(FT_i_${clust}) dest(FT_p_${clust}));
    OF_predstore_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_p_${clust}) dest());  

    // Explicit save/restore formats - Shail Aditya 05/26/98
    OF_intsave_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_ic_${clust}) dest());
    OF_intrestore_${clust}(pred(FT_p_${clust}) src(FT_i_${clust}) dest(FT_ic_${clust}));
    OF_floatsave_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_f_${clust}) dest());
    OF_floatrestore_${clust}(pred(FT_p_${clust}) src(FT_i_${clust}) dest(FT_f_${clust}));
    OF_brsave_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_b_${clust}) dest());
    OF_brrestore_${clust}(pred(FT_p_${clust}) src(FT_i_${clust}) dest(FT_b_${clust}));
    OF_psave_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_icp_${clust}) dest());
    OF_prestore_${clust}(pred(FT_p_${clust}) src(FT_i_${clust}) dest(FT_icp_${clust}));

    OF_intsaveg_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_ic_${clust}) dest());
    OF_intrestoreg_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust}) dest(FT_ic_${clust}));
    OF_floatsaveg_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_f_${clust}) dest());
    OF_floatrestoreg_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust}) dest(FT_f_${clust}));
    OF_brsaveg_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_b_${clust}) dest());
    OF_brrestoreg_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust}) dest(FT_b_${clust}));
    OF_psaveg_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_icp_${clust}) dest());
    OF_prestoreg_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust}) dest(FT_icp_${clust}));

    // added vector support - parkhc 01/2007
    OF_vec_intsave_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_I_${clust}) dest());
    OF_vec_intrestore_${clust}(pred(FT_p_${clust}) src(FT_i_${clust}) dest(FT_I_${clust}));
    OF_vec_floatsave_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_F_${clust}) dest());
    OF_vec_floatrestore_${clust}(pred(FT_p_${clust}) src(FT_i_${clust}) dest(FT_F_${clust}));
    OF_vec_intsaveg_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_I_${clust}) dest());
    OF_vec_intrestoreg_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust}) dest(FT_I_${clust}));
    OF_vec_floatsaveg_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_F_${clust}) dest());
    OF_vec_floatrestoreg_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust}) dest(FT_F_${clust}));

    // TBD: B as src and dest for BTR moves

    OF_sext_${clust}(pred(FT_p_${clust}) src(FT_i_${clust}) dest(FT_i_${clust}));
    OF_moveif_${clust}(pred(FT_p_${clust}) src(FT_i_${clust}) dest(FT_f_${clust}));
    OF_movefi_${clust}(pred(FT_p_${clust}) src(FT_f_${clust}) dest(FT_i_${clust}));
    OF_moveip_${clust}(pred(FT_p_${clust}) src(FT_i_${clust}) dest(FT_p_${clust}));
    OF_movepi_${clust}(pred(FT_p_${clust}) src(FT_p_${clust}) dest(FT_i_${clust}));
    OF_pred_${clust}(pred() src() dest(FT_p_${clust}));

    // Move/extract bits to/from pred -- Shail Aditya 05/26/98
    OF_movegbp_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust}) dest(FT_p_${clust}));
    OF_movegcm_${clust}(pred(FT_p_${clust}) src(FT_il_${clust} FT_il_${clust} FT_c_${clust}) dest(FT_c_${clust}));

    // HPL-PD 2.0 extn
    // For literal moves
    OF_intlitmove_${clust}(pred(FT_p_${clust}) src(FT_o) dest(FT_i_${clust}));
    OF_floatlitmove_${clust}(pred(FT_p_${clust}) src(FT_o) dest(FT_f_${clust}));
    // For new split moves instead of move

    // For literal moves and pbrs
    OF_btrlitmove_${clust}(pred(FT_p_${clust}) src(FT_n) dest(FT_b_${clust}));
    OF_pbrlit_${clust}(pred(FT_p_${clust}) src(FT_n FT_n) dest(FT_b_${clust}));

    // TBD: added B on first src operand for PBR operations -- SAG 10/28/97
    OF_branch_${clust}(pred(FT_p_${clust}) src(FT_ilb_${clust} FT_l) dest(FT_b_${clust}));
    OF_brucond_${clust}(pred(FT_p_${clust}) src(FT_b_${clust}) dest());
    OF_brcond_${clust}(pred(FT_p_${clust}) src(FT_b_${clust} FT_p_${clust}) dest());
    OF_brlink_${clust}(pred(FT_p_${clust}) src(FT_b_${clust}) dest(FT_b_${clust}));
    OF_brtop_${clust}(pred() src(FT_b_${clust} FT_c_${clust} FT_c_${clust}) dest(FT_p_${clust} FT_c_${clust} FT_c_${clust}));
    OF_brlc_${clust}(pred(FT_p_${clust}) src(FT_b_${clust} FT_c_${clust}) dest(FT_c_${clust}));

    OF_brdvi_${clust}(pred(FT_p_${clust}) src(FT_b_${clust} FT_i_${clust}) dest());
    OF_brdvf_${clust}(pred(FT_p_${clust}) src(FT_b_${clust} FT_f_${clust}) dest());

    // SLARSEN: Vector operation formats
    OF_vec_intarith2_${clust}(pred(FT_p_${clust}) src(FT_Il_${clust} FT_Il_${clust} FT_M_${clust}) dest(FT_I_${clust}));

    OF_vec_floatarith1_${clust}(pred(FT_p_${clust}) src(FT_F_${clust} FT_M_${clust}) dest(FT_F_${clust}));
    OF_vec_floatarith2_${clust}(pred(FT_p_${clust}) src(FT_F_${clust} FT_F_${clust} FT_M_${clust}) dest(FT_F_${clust}));

    OF_vec_sext_${clust}(pred(FT_p_${clust}) src(FT_Il_${clust} FT_M_${clust}) dest(FT_I_${clust}));
    OF_vec_moveii_${clust}(pred(FT_p_${clust}) src(FT_Il_${clust} FT_M_${clust}) dest(FT_I_${clust}));
    OF_vec_moveff_${clust}(pred(FT_p_${clust}) src(FT_F_${clust} FT_M_${clust}) dest(FT_F_${clust}));
    OF_vec_movefi_${clust}(pred(FT_p_${clust}) src(FT_F_${clust} FT_M_${clust}) dest(FT_I_${clust}));
    OF_vec_moveif_${clust}(pred(FT_p_${clust}) src(FT_Il_${clust} FT_M_${clust}) dest(FT_F_${clust}));
    OF_vec_movemm_${clust}(pred(FT_p_${clust}) src(FT_M_${clust}) dest(FT_M_${clust}));

    OF_vec_intvsmove_${clust}(pred(FT_p_${clust}) src(FT_I_${clust} FT_il_${clust}) dest(FT_i_${clust}));
    OF_vec_intsvmove_${clust}(pred(FT_p_${clust}) src(FT_il_${clust} FT_il_${clust}) dest(FT_I_${clust}));
    OF_vec_floatvsmove_${clust}(pred(FT_p_${clust}) src(FT_F_${clust} FT_il_${clust}) dest(FT_f_${clust}));
    OF_vec_floatsvmove_${clust}(pred(FT_p_${clust}) src(FT_f_${clust} FT_il_${clust}) dest(FT_F_${clust}));

    OF_vec_intload_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_M_${clust}) dest(FT_I_${clust}));
    OF_vec_floatload_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_M_${clust}) dest(FT_F_${clust}));
    OF_vec_intstore_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_Il_${clust} FT_M_${clust}) dest());  
    OF_vec_floatstore_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_F_${clust} FT_M_${clust}) dest());

    OF_vec_intloadgdisp_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_M_${clust}) dest(FT_I_${clust}));
    OF_vec_floatloadgdisp_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_M_${clust}) dest(FT_F_${clust}));
    OF_vec_intstoregdisp_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_Il_${clust} FT_M_${clust}) dest());
    OF_vec_floatstoregdisp_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_F_${clust} FT_M_${clust}) dest());

    OF_vec_intload_elem_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_M_${clust}) dest(FT_I_${clust}));
    OF_vec_floatload_elem_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_M_${clust}) dest(FT_F_${clust}));
    OF_vec_intstore_elem_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_il_${clust} FT_M_${clust}) dest());  
    OF_vec_floatstore_elem_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_F_${clust} FT_M_${clust}) dest());

    OF_vec_intloadgdisp_elem_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_il_${clust} FT_M_${clust}) dest(FT_I_${clust}));
    OF_vec_floatloadgdisp_elem_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_il_${clust} FT_M_${clust}) dest(FT_F_${clust}));
    OF_vec_intstoregdisp_elem_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_il_${clust} FT_Il_${clust} FT_M_${clust}) dest());
    OF_vec_floatstoregdisp_elem_${clust}(pred(FT_p_${clust}) src(FT_i_${clust} FT_il_${clust} FT_il_${clust} FT_F_${clust} FT_M_${clust}) dest());

    OF_vec_intperm_${clust}(pred(FT_p_${clust}) src(FT_I_${clust} FT_M_${clust}) dest(FT_I_${clust}));
    OF_vec_floatperm_${clust}(pred(FT_p_${clust}) src(FT_F_${clust} FT_M_${clust}) dest(FT_F_${clust}));	

    OF_vec_intsplat_${clust}(pred(FT_p_${clust}) src(FT_il_${clust} FT_M_${clust}) dest(FT_I_${clust}));
    OF_vec_floatsplat_${clust}(pred(FT_p_${clust}) src(FT_f_${clust} FT_M_${clust}) dest(FT_F_${clust}));	
  }

  $for (clust in $0..(num_clusters-1)) {
    $for (clust2 in $0..(num_clusters-1)) {
      OF_moveii_${clust}_${clust2}(pred(FT_p_${clust}) src(FT_iclb_${clust}) dest(FT_icb_${clust2}));
      OF_moveff_${clust}_${clust2}(pred(FT_p_${clust}) src(FT_f_${clust}) dest(FT_f_${clust2}));
      OF_movepp_${clust}_${clust2}(pred(FT_p_${clust}) src(FT_p_${clust}) dest(FT_p_${clust2}));
      OF_movegg_${clust}_${clust2}(pred(FT_p_${clust}) src(FT_i_${clust}) dest(FT_i_${clust2}));
      OF_movebb_${clust}_${clust2}(pred(FT_p_${clust}) src(FT_b_${clust}) dest(FT_b_${clust2}));
      OF_movegc_${clust}_${clust2}(pred(FT_p_${clust}) src(FT_i_${clust}) dest(FT_c_${clust2}));
      OF_movecg_${clust}_${clust2}(pred(FT_p_${clust}) src(FT_c_${clust}) dest(FT_i_${clust2}));
    }
  }

  // intercluster vector moves
  $for (clust in $0..(num_clusters-1)) {
    $for (clust2 in $0..(num_clusters-1)) {
      OF_vec_moveii_${clust}_${clust2}(pred(FT_p_${clust}) src(FT_I_${clust}) dest(FT_I_${clust2}));
      OF_vec_moveff_${clust}_${clust2}(pred(FT_p_${clust}) src(FT_F_${clust}) dest(FT_F_${clust2}));
      OF_vec_movemm_${clust}_${clust2}(pred(FT_p_${clust}) src(FT_M_${clust}) dest(FT_M_${clust2}));
    }
  }
}

// **************************************************************
//  Latency Classes

SECTION Operand_Latency
{
  // latency times
  time_null(time(0));

  time_int_alu_sample(time(int_alu_sample));
  time_int_alu_exception(time(int_alu_exception));
  time_int_alu_latency(time(int_alu_latency));
  time_int_alu_reserve(time(int_alu_reserve));

  time_int_cmpp_sample(time(int_cmpp_sample));
  time_int_cmpp_exception(time(int_cmpp_exception));
  time_int_cmpp_latency(time(int_cmpp_latency));
  time_int_cmpp_reserve(time(int_cmpp_reserve));

  time_int_multiply_sample(time(int_multiply_sample));
  time_int_multiply_exception(time(int_multiply_exception));
  time_int_multiply_latency(time(int_multiply_latency));
  time_int_multiply_reserve(time(int_multiply_reserve));
  time_int_multiply_add_sample(time(int_multiply_add_sample));

  time_int_divide_sample(time(int_divide_sample));
  time_int_divide_exception(time(int_divide_exception));
  time_int_divide_latency(time(int_divide_latency));
  time_int_divide_reserve(time(int_divide_reserve));

  time_float_alu_sample(time(float_alu_sample));
  time_float_alu_exception(time(float_alu_exception));
  time_float_alu_latency(time(float_alu_latency));
  time_float_alu_reserve(time(float_alu_reserve));

  time_float_cmpp_sample(time(float_cmpp_sample));
  time_float_cmpp_exception(time(float_cmpp_exception));
  time_float_cmpp_latency(time(float_cmpp_latency));
  time_float_cmpp_reserve(time(float_cmpp_reserve));

  time_float_multiply_sample(time(float_multiply_sample));
  time_float_multiply_exception(time(float_multiply_exception));
  time_float_multiply_latency(time(float_multiply_latency));
  time_float_multiply_reserve(time(float_multiply_reserve));

  time_float_divide_sample(time(float_divide_sample));
  time_float_divide_exception(time(float_divide_exception));
  time_float_divide_latency(time(float_divide_latency));
  time_float_divide_reserve(time(float_divide_reserve));

  time_post_increment_add(time(post_increment_add));

  time_load_level1_sample(time(load_level1_sample));
  time_load_level1_exception(time(load_level1_exception));
  time_load_level1_latency(time(load_level1_latency));
  time_load_level1_reserve(time(load_level1_reserve));

  time_load_level2_sample(time(load_level2_sample));
  time_load_level2_exception(time(load_level2_exception));
  time_load_level2_latency(time(load_level2_latency));
  time_load_level2_reserve(time(load_level2_reserve));

  time_load_level3_sample(time(load_level3_sample));
  time_load_level3_exception(time(load_level3_exception));
  time_load_level3_latency(time(load_level3_latency));
  time_load_level3_reserve(time(load_level3_reserve));

  time_dsload_level1_sample(time(dsload_level1_sample));
  time_dsload_level1_exception(time(dsload_level1_exception));
  time_dsload_level1_latency(time(dsload_level1_latency));
  time_dsload_level1_reserve(time(dsload_level1_reserve));

  time_dsload_level2_sample(time(dsload_level2_sample));
  time_dsload_level2_exception(time(dsload_level2_exception));
  time_dsload_level2_latency(time(dsload_level2_latency));
  time_dsload_level2_reserve(time(dsload_level2_reserve));

  time_dsload_level3_sample(time(dsload_level3_sample));
  time_dsload_level3_exception(time(dsload_level3_exception));
  time_dsload_level3_latency(time(dsload_level3_latency));
  time_dsload_level3_reserve(time(dsload_level3_reserve));

  time_store_sample(time(store_sample));
  time_store_exception(time(store_exception));
  time_store_latency(time(store_latency));
  time_store_reserve(time(store_reserve));

  time_dsload_verify_sample(time(dsload_verify_sample));
  time_dsload_verify_exception(time(dsload_verify_exception));
  time_dsload_verify_latency(time(dsload_verify_latency));
  time_dsload_verify_reserve(time(dsload_verify_reserve));

  time_branch_sample(time(branch_sample));
  time_branch_exception(time(branch_exception));
  time_branch_latency(time(branch_latency));
  time_branch_reserve(time(branch_reserve));

  // HPL-PD 2.0 Extn
  $if ($?{local_memories}) {
    time_load_localmem_sample(time(load_localmem_sample));
    time_load_localmem_exception(time(load_localmem_exception));
    time_load_localmem_latency(time(load_localmem_latency));
    time_load_localmem_reserve(time(load_localmem_reserve));
  
    time_store_localmem_sample(time(store_localmem_sample));
    time_store_localmem_exception(time(store_localmem_exception));
    time_store_localmem_latency(time(store_localmem_latency));
    time_store_localmem_reserve(time(store_localmem_reserve));
  }

  // SLARSEN: Vector operand latencies
  time_vec_int_alu_sample(time(vec_int_alu_sample));
  time_vec_int_alu_exception(time(vec_int_alu_exception));
  time_vec_int_alu_latency(time(vec_int_alu_latency));
  time_vec_int_alu_reserve(time(vec_int_alu_reserve));

  time_vec_int_multiply_sample(time(vec_int_multiply_sample));
  time_vec_int_multiply_exception(time(vec_int_multiply_exception));
  time_vec_int_multiply_latency(time(vec_int_multiply_latency));
  time_vec_int_multiply_reserve(time(vec_int_multiply_reserve));

  time_vec_int_divide_sample(time(vec_int_divide_sample));
  time_vec_int_divide_exception(time(vec_int_divide_exception));
  time_vec_int_divide_latency(time(vec_int_divide_latency));
  time_vec_int_divide_reserve(time(vec_int_divide_reserve));

  time_vec_float_alu_sample(time(vec_float_alu_sample));
  time_vec_float_alu_exception(time(vec_float_alu_exception));
  time_vec_float_alu_latency(time(vec_float_alu_latency));
  time_vec_float_alu_reserve(time(vec_float_alu_reserve));

  time_vec_float_move_sample(time(vec_float_move_sample));
  time_vec_float_move_exception(time(vec_float_move_exception));
  time_vec_float_move_latency(time(vec_float_move_latency));
  time_vec_float_move_reserve(time(vec_float_move_reserve));

  time_vec_float_multiply_sample(time(vec_float_multiply_sample));
  time_vec_float_multiply_exception(time(vec_float_multiply_exception));
  time_vec_float_multiply_latency(time(vec_float_multiply_latency));
  time_vec_float_multiply_reserve(time(vec_float_multiply_reserve));

  time_vec_float_divide_sample(time(vec_float_divide_sample));
  time_vec_float_divide_exception(time(vec_float_divide_exception));
  time_vec_float_divide_latency(time(vec_float_divide_latency));
  time_vec_float_divide_reserve(time(vec_float_divide_reserve));

  time_vec_load_level1_sample(time(load_level1_sample));
  time_vec_load_level1_exception(time(load_level1_exception));
  time_vec_load_level1_latency(time(load_level1_latency));
  time_vec_load_level1_reserve(time(load_level1_reserve));

  time_vec_store_sample(time(store_sample));
  time_vec_store_exception(time(store_exception));
  time_vec_store_latency(time(store_latency));
  time_vec_store_reserve(time(store_reserve));

  time_vec_int_perm_sample(time(vec_int_perm_sample));
  time_vec_int_perm_exception(time(vec_int_perm_exception));
  time_vec_int_perm_latency(time(vec_int_perm_latency));
  time_vec_int_perm_reserve(time(vec_int_perm_reserve));

  time_vec_float_perm_sample(time(vec_float_perm_sample));
  time_vec_float_perm_exception(time(vec_float_perm_exception));
  time_vec_float_perm_latency(time(vec_float_perm_latency));
  time_vec_float_perm_reserve(time(vec_float_perm_reserve));

  time_vec_int_xfr_sample(time(vec_int_xfr_sample));
  time_vec_int_xfr_exception(time(vec_int_xfr_exception));
  time_vec_int_xfr_latency(time(vec_int_xfr_latency));
  time_vec_int_xfr_reserve(time(vec_int_xfr_reserve));

  time_vec_float_xfr_sample(time(vec_float_xfr_sample));
  time_vec_float_xfr_exception(time(vec_float_xfr_exception));
  time_vec_float_xfr_latency(time(vec_float_xfr_latency));
  time_vec_float_xfr_reserve(time(vec_float_xfr_reserve));
}

SECTION Operation_Latency
{
  OL_null(exc(time_null) 
	  rsv(time_null
	      time_null
	      time_null
	      time_null
	      time_null) 
 	  pred(time_null) 
	  src(time_null 
	      time_null 
	      time_null 
	      time_null 
	      time_null) 
	  sync_src(time_null
                   time_null) 
	  dest(time_null
               time_null
               time_null
               time_null) 
	  sync_dest(time_null
		    time_null));

  OL_int(exc(time_int_alu_exception) 
	 rsv(time_int_alu_reserve
	     time_int_alu_reserve
	     time_int_alu_reserve
	     time_int_alu_reserve
	     time_int_alu_reserve) 
 	 pred(time_int_alu_sample) 
	 src(time_int_alu_sample 
	     time_int_alu_sample 
	     time_int_alu_sample 
	     time_int_alu_sample 
	     time_int_alu_sample) 
	 sync_src(time_int_alu_sample
                  time_int_alu_sample) 
	 dest(time_int_alu_latency
              time_int_alu_latency
              time_int_alu_latency
              time_int_alu_latency) 
	 sync_dest(time_int_alu_sample
		   time_int_alu_sample));

  OL_float(exc(time_float_alu_exception) 
	   rsv(time_float_alu_reserve
	       time_float_alu_reserve
	       time_float_alu_reserve
	       time_float_alu_reserve
	       time_float_alu_reserve) 
 	   pred(time_float_alu_sample) 
	   src(time_float_alu_sample 
	       time_float_alu_sample 
	       time_float_alu_sample 
	       time_float_alu_sample 
	       time_float_alu_sample) 
	   sync_src(time_float_alu_sample
                    time_float_alu_sample) 
	   dest(time_float_alu_latency
                time_float_alu_latency
                time_float_alu_latency
                time_float_alu_latency) 
	   sync_dest(time_float_alu_sample
		     time_float_alu_sample));

  OL_load1(exc(time_load_level1_exception) 
	   rsv(time_load_level1_reserve
	       time_load_level1_reserve
	       time_load_level1_reserve
	       time_load_level1_reserve
	       time_load_level1_reserve)
  	   pred(time_load_level1_sample) 
	   src(time_load_level1_sample 
	       time_load_level1_sample 
	       time_load_level1_sample 
	       time_load_level1_sample 
	       time_load_level1_sample) 
	   sync_src(time_load_level1_sample
                    time_load_level1_sample) 
	   dest(time_load_level1_latency
                time_post_increment_add
                time_load_level1_latency
                time_load_level1_latency) 
	   sync_dest(time_load_level1_sample
		     time_load_level1_sample));

  OL_load2(exc(time_load_level2_exception) 
	   rsv(time_load_level2_reserve
	       time_load_level2_reserve
	       time_load_level2_reserve
	       time_load_level2_reserve
	       time_load_level2_reserve) 
 	   pred(time_load_level2_sample) 
	   src(time_load_level2_sample 
	       time_load_level2_sample 
	       time_load_level2_sample 
	       time_load_level2_sample 
	       time_load_level2_sample) 
	   sync_src(time_load_level2_sample
                    time_load_level2_sample) 
	   dest(time_load_level2_latency
                time_post_increment_add
                time_load_level2_latency
                time_load_level2_latency) 
	   sync_dest(time_load_level2_sample
		     time_load_level2_sample));

  OL_load3(exc(time_load_level3_exception) 
	   rsv(time_load_level3_reserve
		time_load_level3_reserve
		time_load_level3_reserve
		time_load_level3_reserve
		time_load_level3_reserve) 
   	   pred(time_load_level3_sample) 
	   src(time_load_level3_sample 
	       time_load_level3_sample 
	       time_load_level3_sample 
	       time_load_level3_sample 
	       time_load_level3_sample) 
	   sync_src(time_load_level3_sample
                    time_load_level3_sample) 
	   dest(time_load_level3_latency
                time_post_increment_add
                time_load_level3_latency
                time_load_level3_latency) 
	   sync_dest(time_load_level3_sample
		   time_load_level3_sample));

  OL_dsload1(exc(time_dsload_level1_exception) 
	     rsv(time_dsload_level1_reserve
		 time_dsload_level1_reserve
		 time_dsload_level1_reserve
		 time_dsload_level1_reserve
		 time_dsload_level1_reserve) 
 	     pred(time_dsload_level1_sample) 
	     src(time_dsload_level1_sample 
	         time_dsload_level1_sample 
	         time_dsload_level1_sample 
	         time_dsload_level1_sample 
	         time_dsload_level1_sample) 
	     sync_src(time_dsload_level1_sample
                      time_dsload_level1_sample) 
	     dest(time_dsload_level1_latency
                  time_post_increment_add
                  time_dsload_level1_latency
                  time_dsload_level1_latency) 
	     sync_dest(time_dsload_level1_sample
		       time_dsload_level1_sample));

  OL_dsload2(exc(time_dsload_level2_exception) 
	     rsv(time_dsload_level2_reserve
		 time_dsload_level2_reserve
		 time_dsload_level2_reserve
		 time_dsload_level2_reserve
		 time_dsload_level2_reserve) 
 	     pred(time_dsload_level2_sample) 
	     src(time_dsload_level2_sample 
	         time_dsload_level2_sample 
	         time_dsload_level2_sample 
	         time_dsload_level2_sample 
	         time_dsload_level2_sample) 
	     sync_src(time_dsload_level2_sample
                      time_dsload_level2_sample) 
	     dest(time_dsload_level2_latency
                  time_post_increment_add
                  time_dsload_level2_latency
                  time_dsload_level2_latency) 
	     sync_dest(time_dsload_level2_sample
		       time_dsload_level2_sample));

  OL_dsload3(exc(time_dsload_level3_exception) 
	     rsv(time_dsload_level3_reserve
		 time_dsload_level3_reserve
		 time_dsload_level3_reserve
		 time_dsload_level3_reserve
		 time_dsload_level3_reserve) 
 	     pred(time_dsload_level3_sample) 
	     src(time_dsload_level3_sample 
	         time_dsload_level3_sample 
	         time_dsload_level3_sample 
	         time_dsload_level3_sample 
	         time_dsload_level3_sample) 
	     sync_src(time_dsload_level3_sample
                      time_dsload_level3_sample) 
	     dest(time_dsload_level3_latency
                  time_post_increment_add
                  time_dsload_level3_latency
                  time_dsload_level3_latency) 
	     sync_dest(time_dsload_level3_sample
		       time_dsload_level3_sample));

  OL_dsload_verify(exc(time_dsload_verify_exception) 
	     rsv(time_dsload_verify_reserve
		 time_dsload_verify_reserve
		 time_dsload_verify_reserve
		 time_dsload_verify_reserve
		 time_dsload_verify_reserve) 
 	     pred(time_dsload_verify_sample) 
	     src(time_dsload_verify_sample 
	         time_dsload_verify_sample 
	         time_dsload_verify_sample 
	         time_dsload_verify_sample 
	         time_dsload_verify_sample) 
	     sync_src(time_dsload_verify_latency
                      time_dsload_verify_sample) 
	     dest(time_dsload_verify_latency
                  time_dsload_verify_latency
                  time_dsload_verify_latency
                  time_dsload_verify_latency) 
	     sync_dest(time_dsload_verify_latency
		       time_dsload_verify_latency));

  OL_store(exc(time_store_exception) 
	   rsv(time_store_reserve
		time_store_reserve
		time_store_reserve
		time_store_reserve
		time_store_reserve) 
 	   pred(time_store_sample) 
	   src(time_store_sample 
	       time_store_sample 
	       time_store_sample 
	       time_store_sample 
	       time_store_sample) 
	   sync_src(time_store_sample
                    time_store_sample) 
	   dest(time_store_latency
                time_store_latency
                time_store_latency
                time_store_latency) 
	   sync_dest(time_store_latency
		     time_store_latency));

  OL_branch(exc(time_branch_exception) 
	    rsv(time_branch_reserve
		time_branch_reserve
		time_branch_reserve
		time_branch_reserve
		time_branch_reserve) 
 	    pred(time_branch_sample) 
	    src(time_branch_sample 
	        time_branch_sample 
	        time_branch_sample 
	        time_branch_sample 
	        time_branch_sample) 
	    sync_src(time_branch_sample
                     time_branch_sample) 
	    dest(time_branch_latency
                 time_branch_latency
                 time_branch_latency
                 time_branch_latency) 
	    sync_dest(time_branch_latency
		      time_branch_latency));

  OL_intcmpp(exc(time_int_cmpp_exception) 
	     rsv(time_int_cmpp_reserve
		 time_int_cmpp_reserve
		 time_int_cmpp_reserve
		 time_int_cmpp_reserve
		 time_int_cmpp_reserve) 
 	     pred(time_int_cmpp_sample) 
	     src(time_int_cmpp_sample 
	         time_int_cmpp_sample 
	         time_int_cmpp_sample 
	         time_int_cmpp_sample 
	         time_int_cmpp_sample) 
	     sync_src(time_int_cmpp_sample
                      time_int_cmpp_sample) 
	     dest(time_int_cmpp_latency
                  time_int_cmpp_latency
                  time_int_cmpp_latency
                  time_int_cmpp_latency) 
	     sync_dest(time_int_cmpp_sample
		       time_int_cmpp_sample));

  OL_intmpy(exc(time_int_multiply_exception) 
	    rsv(time_int_multiply_reserve
		time_int_multiply_reserve
		time_int_multiply_reserve
		time_int_multiply_reserve
		time_int_multiply_reserve) 
 	    pred(time_int_multiply_sample) 
	    src(time_int_multiply_sample 
	        time_int_multiply_sample 
	        time_int_multiply_sample 
	        time_int_multiply_add_sample 
	        time_int_multiply_sample) 
	    sync_src(time_int_multiply_sample
                     time_int_multiply_sample) 
	    dest(time_int_multiply_latency
                 time_int_multiply_latency
                 time_int_multiply_latency
                 time_int_multiply_latency) 
	    sync_dest(time_int_multiply_sample
		      time_int_multiply_sample));

  OL_intdiv(exc(time_int_divide_exception) 
	    rsv(time_int_divide_reserve
		 time_int_divide_reserve
		 time_int_divide_reserve
		 time_int_divide_reserve
		 time_int_divide_reserve) 
 	    pred(time_int_divide_sample) 
	    src(time_int_divide_sample 
	        time_int_divide_sample 
	        time_int_divide_sample 
	        time_int_divide_sample 
	        time_int_divide_sample) 
	    sync_src(time_int_divide_sample
                     time_int_divide_sample) 
	    dest(time_int_divide_latency
                 time_int_divide_latency
                 time_int_divide_latency
                 time_int_divide_latency) 
	    sync_dest(time_int_divide_sample
		      time_int_divide_sample));

  OL_floatcmpp(exc(time_float_cmpp_exception) 
	       rsv(time_float_cmpp_reserve
		   time_float_cmpp_reserve
		   time_float_cmpp_reserve
		   time_float_cmpp_reserve
		   time_float_cmpp_reserve) 
 	       pred(time_float_cmpp_sample) 
	       src(time_float_cmpp_sample 
	           time_float_cmpp_sample 
	           time_float_cmpp_sample 
	           time_float_cmpp_sample 
	           time_float_cmpp_sample) 
	       sync_src(time_float_cmpp_sample
                        time_float_cmpp_sample) 
	       dest(time_float_cmpp_latency
                    time_float_cmpp_latency
                    time_float_cmpp_latency
                    time_float_cmpp_latency) 
	       sync_dest(time_float_cmpp_sample
		    time_float_cmpp_sample));

  OL_floatmpy(exc(time_float_multiply_exception) 
	      rsv(time_float_multiply_reserve
		  time_float_multiply_reserve
		  time_float_multiply_reserve
		  time_float_multiply_reserve
		  time_float_multiply_reserve) 
 	      pred(time_float_multiply_sample) 
	      src(time_float_multiply_sample 
	          time_float_multiply_sample 
	          time_float_multiply_sample 
	          time_float_multiply_sample 
	          time_float_multiply_sample) 
	      sync_src(time_float_multiply_sample
                       time_float_multiply_sample) 
	      dest(time_float_multiply_latency
                   time_float_multiply_latency
                   time_float_multiply_latency
                   time_float_multiply_latency) 
	      sync_dest(time_float_multiply_sample
		        time_float_multiply_sample));

  OL_floatdiv(exc(time_float_divide_exception) 
	      rsv(time_float_divide_reserve
		   time_float_divide_reserve
		   time_float_divide_reserve
		   time_float_divide_reserve
		   time_float_divide_reserve) 
 	      pred(time_float_divide_sample) 
	      src(time_float_divide_sample 
	          time_float_divide_sample 
	          time_float_divide_sample 
	          time_float_divide_sample 
	          time_float_divide_sample) 
	      sync_src(time_float_divide_sample
                       time_float_divide_sample) 
	      dest(time_float_divide_latency
                   time_float_divide_latency
                   time_float_divide_latency
                   time_float_divide_latency) 
	      sync_dest(time_float_divide_sample
		        time_float_divide_sample));

  // HPL-PD 2.0 Extn
  $if ($?{local_memories}) {

  OL_load_localmem(exc(time_load_localmem_exception) 
	           rsv(time_load_localmem_reserve
		       time_load_localmem_reserve
		       time_load_localmem_reserve
		       time_load_localmem_reserve
		       time_load_localmem_reserve)
 	           pred(time_load_localmem_sample) 
	           src(time_load_localmem_sample 
	               time_load_localmem_sample 
	               time_load_localmem_sample 
	               time_load_localmem_sample 
	               time_load_localmem_sample) 
	           sync_src(time_load_localmem_sample
                            time_load_localmem_sample) 
	           dest(time_load_localmem_latency
                        time_post_increment_add
                        time_load_localmem_latency
                        time_load_localmem_latency) 
	           sync_dest(time_load_localmem_sample
		             time_load_localmem_sample));

  OL_store_localmem(exc(time_store_localmem_exception) 
	            rsv(time_store_localmem_reserve
		        time_store_localmem_reserve
		        time_store_localmem_reserve
		        time_store_localmem_reserve
		        time_store_localmem_reserve) 
 	            pred(time_store_localmem_sample) 
	            src(time_store_localmem_sample 
	                time_store_localmem_sample 
	                time_store_localmem_sample 
	                time_store_localmem_sample 
	                time_store_localmem_sample) 
	            sync_src(time_store_localmem_sample
                             time_store_localmem_sample) 
	            dest(time_store_localmem_latency
                         time_store_localmem_latency
                         time_store_localmem_latency
                         time_store_localmem_latency) 
	            sync_dest(time_store_localmem_latency
		              time_store_localmem_latency));

  // SLARSEN: Vector operation latencies
  OL_vec_int(exc(time_vec_int_alu_exception) 
	    rsv(time_vec_int_alu_reserve
	      time_vec_int_alu_reserve
	      time_vec_int_alu_reserve
	      time_vec_int_alu_reserve
	      time_vec_int_alu_reserve) 
 	 pred(time_vec_int_alu_sample) 
	 src(time_vec_int_alu_sample 
	     time_vec_int_alu_sample 
	     time_vec_int_alu_sample 
	     time_vec_int_alu_sample 
	     time_vec_int_alu_sample) 
	 sync_src(time_vec_int_alu_sample
                  time_vec_int_alu_sample) 
	 dest(time_vec_int_alu_latency
              time_vec_int_alu_latency
              time_vec_int_alu_latency
              time_vec_int_alu_latency) 
	 sync_dest(time_vec_int_alu_sample
		   time_vec_int_alu_sample));

  OL_vec_intmpy(exc(time_vec_int_multiply_exception) 
	    rsv(time_vec_int_multiply_reserve
		 time_vec_int_multiply_reserve
		 time_vec_int_multiply_reserve
		 time_vec_int_multiply_reserve
		 time_vec_int_multiply_reserve) 
 	 pred(time_vec_int_multiply_sample) 
	 src(time_vec_int_multiply_sample 
	     time_vec_int_multiply_sample 
	     time_vec_int_multiply_sample 
	     time_vec_int_multiply_sample 
	     time_vec_int_multiply_sample) 
	 sync_src(time_vec_int_multiply_sample
                  time_vec_int_multiply_sample) 
	 dest(time_vec_int_multiply_latency
              time_vec_int_multiply_latency
              time_vec_int_multiply_latency
              time_vec_int_multiply_latency) 
	 sync_dest(time_vec_int_multiply_sample
		   time_vec_int_multiply_sample));

  OL_vec_intdiv(exc(time_vec_int_divide_exception) 
	    rsv(time_vec_int_divide_reserve
		 time_vec_int_divide_reserve
		 time_vec_int_divide_reserve
		 time_vec_int_divide_reserve
		 time_vec_int_divide_reserve) 
 	 pred(time_vec_int_divide_sample) 
	 src(time_vec_int_divide_sample 
	     time_vec_int_divide_sample 
	     time_vec_int_divide_sample 
	     time_vec_int_divide_sample 
	     time_vec_int_divide_sample) 
	 sync_src(time_vec_int_divide_sample
                  time_vec_int_divide_sample) 
	 dest(time_vec_int_divide_latency
              time_vec_int_divide_latency
              time_vec_int_divide_latency
              time_vec_int_divide_latency) 
	 sync_dest(time_vec_int_divide_sample
		   time_vec_int_divide_sample));

  OL_vec_float(exc(time_vec_float_alu_exception) 
	   rsv(time_vec_float_alu_reserve
		time_vec_float_alu_reserve
		time_vec_float_alu_reserve
		time_vec_float_alu_reserve
		time_vec_float_alu_reserve) 
 	 pred(time_vec_float_alu_sample) 
	 src(time_vec_float_alu_sample 
	     time_vec_float_alu_sample 
	     time_vec_float_alu_sample 
	     time_vec_float_alu_sample 
	     time_vec_float_alu_sample) 
	 sync_src(time_vec_float_alu_sample
                  time_vec_float_alu_sample) 
	 dest(time_vec_float_alu_latency
              time_vec_float_alu_latency
              time_vec_float_alu_latency
              time_vec_float_alu_latency) 
	 sync_dest(time_vec_float_alu_sample
		   time_vec_float_alu_sample));

  OL_vec_floatmove(exc(time_vec_float_move_exception) 
	      rsv(time_vec_float_move_reserve
		   time_vec_float_move_reserve
		   time_vec_float_move_reserve
		   time_vec_float_move_reserve
		   time_vec_float_move_reserve) 
 	 pred(time_vec_float_move_sample) 
	 src(time_vec_float_move_sample 
	     time_vec_float_move_sample 
	     time_vec_float_move_sample 
	     time_vec_float_move_sample 
	     time_vec_float_move_sample) 
	 sync_src(time_vec_float_move_sample
                  time_vec_float_move_sample) 
	 dest(time_vec_float_move_latency
              time_vec_float_move_latency
              time_vec_float_move_latency
              time_vec_float_move_latency) 
	 sync_dest(time_vec_float_move_sample
		   time_vec_float_move_sample));

  OL_vec_floatmpy(exc(time_vec_float_multiply_exception) 
	      rsv(time_vec_float_multiply_reserve
		   time_vec_float_multiply_reserve
		   time_vec_float_multiply_reserve
		   time_vec_float_multiply_reserve
		   time_vec_float_multiply_reserve) 
 	 pred(time_vec_float_multiply_sample) 
	 src(time_vec_float_multiply_sample 
	     time_vec_float_multiply_sample 
	     time_vec_float_multiply_sample 
	     time_vec_float_multiply_sample 
	     time_vec_float_multiply_sample) 
	 sync_src(time_vec_float_multiply_sample
                  time_vec_float_multiply_sample) 
	 dest(time_vec_float_multiply_latency
              time_vec_float_multiply_latency
              time_vec_float_multiply_latency
              time_vec_float_multiply_latency) 
	 sync_dest(time_vec_float_multiply_sample
		   time_vec_float_multiply_sample));

  OL_vec_floatdiv(exc(time_vec_float_divide_exception) 
	      rsv(time_vec_float_divide_reserve
		   time_vec_float_divide_reserve
		   time_vec_float_divide_reserve
		   time_vec_float_divide_reserve
		   time_vec_float_divide_reserve) 
 	 pred(time_vec_float_divide_sample) 
	 src(time_vec_float_divide_sample 
	     time_vec_float_divide_sample 
	     time_vec_float_divide_sample 
	     time_vec_float_divide_sample 
	     time_vec_float_divide_sample) 
	 sync_src(time_vec_float_divide_sample
                  time_vec_float_divide_sample) 
	 dest(time_vec_float_divide_latency
              time_vec_float_divide_latency
              time_vec_float_divide_latency
              time_vec_float_divide_latency) 
	 sync_dest(time_vec_float_divide_sample
		   time_vec_float_divide_sample));

  OL_vec_load1(exc(time_vec_load_level1_exception) 
	   rsv(time_vec_load_level1_reserve
		time_vec_load_level1_reserve
		time_vec_load_level1_reserve
		time_vec_load_level1_reserve
		time_vec_load_level1_reserve)
 	 pred(time_vec_load_level1_sample) 
	 src(time_vec_load_level1_sample 
	     time_vec_load_level1_sample 
	     time_vec_load_level1_sample 
	     time_vec_load_level1_sample 
	     time_vec_load_level1_sample) 
	 sync_src(time_vec_load_level1_sample
                  time_vec_load_level1_sample) 
	 dest(time_vec_load_level1_latency
              time_post_increment_add
              time_vec_load_level1_latency
              time_vec_load_level1_latency) 
	 sync_dest(time_vec_load_level1_sample
		   time_vec_load_level1_sample));

  OL_vec_store(exc(time_vec_store_exception) 
	   rsv(time_vec_store_reserve
		time_vec_store_reserve
		time_vec_store_reserve
		time_vec_store_reserve
		time_vec_store_reserve) 
 	 pred(time_vec_store_sample) 
	 src(time_vec_store_sample 
	     time_vec_store_sample 
	     time_vec_store_sample 
	     time_vec_store_sample 
	     time_vec_store_sample) 
	 sync_src(time_vec_store_sample
                  time_vec_store_sample) 
	 dest(time_vec_store_latency
              time_vec_store_latency
              time_vec_store_latency
              time_vec_store_latency) 
	 sync_dest(time_vec_store_sample
		   time_vec_store_sample));

  OL_vec_intperm(exc(time_vec_int_perm_exception) 
	      rsv(time_vec_int_perm_reserve
		   time_vec_int_perm_reserve
		   time_vec_int_perm_reserve
		   time_vec_int_perm_reserve
		   time_vec_int_perm_reserve) 
 	 pred(time_vec_int_perm_sample) 
	 src(time_vec_int_perm_sample 
	     time_vec_int_perm_sample 
	     time_vec_int_perm_sample 
	     time_vec_int_perm_sample 
	     time_vec_int_perm_sample) 
	 sync_src(time_vec_int_perm_sample
                  time_vec_int_perm_sample) 
	 dest(time_vec_int_perm_latency
              time_vec_int_perm_latency
              time_vec_int_perm_latency
              time_vec_int_perm_latency) 
	 sync_dest(time_vec_int_perm_sample
		   time_vec_int_perm_sample));

  OL_vec_floatperm(exc(time_vec_float_perm_exception) 
	      rsv(time_vec_float_perm_reserve
		   time_vec_float_perm_reserve
		   time_vec_float_perm_reserve
		   time_vec_float_perm_reserve
		   time_vec_float_perm_reserve) 
 	 pred(time_vec_float_perm_sample) 
	 src(time_vec_float_perm_sample 
	     time_vec_float_perm_sample 
	     time_vec_float_perm_sample 
	     time_vec_float_perm_sample 
	     time_vec_float_perm_sample) 
	 sync_src(time_vec_float_perm_sample
                  time_vec_float_perm_sample) 
	 dest(time_vec_float_perm_latency
              time_vec_float_perm_latency
              time_vec_float_perm_latency
              time_vec_float_perm_latency) 
	 sync_dest(time_vec_float_perm_sample
		   time_vec_float_perm_sample));

  OL_vec_intxfr(exc(time_vec_int_xfr_exception) 
	      rsv(time_vec_int_xfr_reserve
		   time_vec_int_xfr_reserve
		   time_vec_int_xfr_reserve
		   time_vec_int_xfr_reserve
		   time_vec_int_xfr_reserve) 
 	 pred(time_vec_int_xfr_sample) 
	 src(time_vec_int_xfr_sample 
	     time_vec_int_xfr_sample 
	     time_vec_int_xfr_sample 
	     time_vec_int_xfr_sample 
	     time_vec_int_xfr_sample) 
	 sync_src(time_vec_int_xfr_sample
                  time_vec_int_xfr_sample) 
	 dest(time_vec_int_xfr_latency
              time_vec_int_xfr_latency
              time_vec_int_xfr_latency
              time_vec_int_xfr_latency) 
	 sync_dest(time_vec_int_xfr_sample
		   time_vec_int_xfr_sample));

  OL_vec_floatxfr(exc(time_vec_float_xfr_exception) 
	      rsv(time_vec_float_xfr_reserve
		   time_vec_float_xfr_reserve
		   time_vec_float_xfr_reserve
		   time_vec_float_xfr_reserve
		   time_vec_float_xfr_reserve) 
 	 pred(time_vec_float_xfr_sample) 
	 src(time_vec_float_xfr_sample 
	     time_vec_float_xfr_sample 
	     time_vec_float_xfr_sample 
	     time_vec_float_xfr_sample 
	     time_vec_float_xfr_sample) 
	 sync_src(time_vec_float_xfr_sample
                  time_vec_float_xfr_sample) 
	 dest(time_vec_float_xfr_latency
              time_vec_float_xfr_latency
              time_vec_float_xfr_latency
              time_vec_float_xfr_latency) 
	 sync_dest(time_vec_float_xfr_sample
		   time_vec_float_xfr_sample));

  }
}

// *************************************************************
// Resource Description

SECTION Resource
{
  $for(clust in $0.. (num_clusters-1)) {

    $for (idx in $0..(integer_units-1)) {
      R_${clust}_i${idx}();
    }

    $for (idx in $0..(float_units-1)) {
      R_${clust}_f${idx}();
    }

    $for (idx in $0..(memory_units-1)) {
      R_${clust}_m${idx}();
    }

    $for (idx in $0..(branch_units-1)) {
      R_${clust}_b${idx}();
    }

    // HPL-PD 2.0 Extn
    $if (${local_memories} != 0) {
      $for ((lmid in $1..(local_memories)) (idx in local_memory_units_per_lmem)) {
        $for (jdx in $0..(${idx}-1)) {
          R_${clust}_lm${lmid}_${jdx}();
        }
      }
    }

    // SLARSEN: Vector entries
    $for (idx in $0..(vec_integer_units-1)) {
      R_${clust}_I${idx}();
    }
    //  $for (idx in $0..(vec_float_units-1)) {
    //    R_${clust}_F${idx}();
    //  }
    $for (idx in $0..(vec_integer_perm_units-1)) {
      R_${clust}_PI${idx}();
    }
    //  $for (idx in $0..(vec_float_perm_units-1)) {
    //    R_${clust}_PF${idx}();
    //  }
    $for (idx in $0..(vec_integer_xfr_units-1)) {
      R_${clust}_xi${idx}();
    }
    //  $for (idx in $0..(vec_float_xfr_units-1)) {
    //    R_${clust}_xf${idx}();
    //  }

    // RMR: issue slots
    R_issue_${clust}(count(issue_slots));
  } 

  $for (idx in $0..(icmove_bw-1)) {
    R_icm_${idx}();
  }

}

// Right now we have a basic 0th cycle resource usage for each resource

SECTION Resource_Usage
{
  $for(clust in $0.. (num_clusters-1)) {

    $for (idx in $0..(integer_units-1)) {
      RU_${clust}_i${idx}(use(R_${clust}_i${idx}) time(0));
    }

    $for (idx in $0..(float_units-1)) {
      RU_${clust}_f${idx}(use(R_${clust}_f${idx}) time(0));
    }

    $for (idx in $0..(memory_units-1)) {
      RU_${clust}_m${idx}(use(R_${clust}_m${idx}) time(0));
    }

    $for (idx in $0..(branch_units-1)) {
      RU_${clust}_b${idx}(use(R_${clust}_b${idx}) time(0));
    }

    // HPL-PD 2.0 Extn
    $if (${local_memories} != 0) {
      $for ((lmid in $1..(local_memories)) (idx in local_memory_units_per_lmem)) {
        $for (jdx in $0..(${idx}-1)) {
          RU_${clust}_lm${lmid}_${jdx}(use(R_${clust}_lm${lmid}_${jdx}) time(0));
    }}}

    // SLARSEN: Vector entries
    $for (idx in $0..(vec_integer_units-1)) {
      RU_${clust}_I${idx}(use(R_${clust}_I${idx}) time(0));
    }
    //  $for (idx in $0..(vec_float_units-1)) {
    //    RU_${clust}_F${idx}(use(R_${clust}_F${idx}) time(0));
    //  }
    $for (idx in $0..(vec_integer_perm_units-1)) {
      RU_${clust}_PI${idx}(use(R_${clust}_PI${idx}) time(0));
    }
    //  $for (idx in $0..(vec_float_perm_units-1)) {
    //    RU_${clust}_PF${idx}(use(R_${clust}_PF${idx}) time(0));
    //  }
    $for (idx in $0..(vec_integer_xfr_units-1)) {
      RU_${clust}_xi${idx}(use(R_${clust}_xi${idx}) time(0));
    }
    //  $for (idx in $0..(vec_float_xfr_units-1)) {
    //    RU_${clust}_xf${idx}(use(R_${clust}_xf${idx}) time(0));
    //  }

    // RMR: issue slots
    RU_issue_${clust}(use(R_issue_${clust}) time(0));

  }

  $for (idx in $0..(icmove_bw-1)) {
    RU_icm_${idx}(use(R_icm_${idx}) time(0));
  }
}

// Right now we have a simple model of one resource usage per reservation table

SECTION Reservation_Table
{
  RT_null(use());

  $for(clust in $0.. (num_clusters-1)) {

    $for (idx in $0..(integer_units-1)) {
      RT_${clust}_i${idx}(use(RU_${clust}_i${idx}));
    }

    $for (idx in $0..(float_units-1)) {
      RT_${clust}_f${idx}(use(RU_${clust}_f${idx}));
    }

    $for (idx in $0..(memory_units-1)) {
      RT_${clust}_m${idx}(use(RU_${clust}_m${idx}));
    }

    $for (idx in $0..(branch_units-1)) {
      RT_${clust}_b${idx}(use(RU_${clust}_b${idx}));
    }

    // HPL-PD 2.0 Extn
    $if (${local_memories} != 0) {
      $for ((lmid in $1..(local_memories)) (idx in local_memory_units_per_lmem)) {
        $for (jdx in $0..(${idx}-1)) {
          RT_${clust}_lm${lmid}_${jdx}(use(RU_${clust}_lm${lmid}_${jdx}));
    }}}

    // SLARSEN: Vector entries
    $for (idx in $0..(vec_integer_units-1)) {
      RT_${clust}_I${idx}(use(RU_${clust}_I${idx} RU_issue_${clust}));
    }
    //  $for (idx in $0..(vec_float_units-1)) {
    //    RT_${clust}_F${idx}(use(RU_${clust}_F${idx} RU_issue_${clust}));
    //  }
    $for (idx in $0..(vec_integer_perm_units-1)) {
      RT_${clust}_PI${idx}(use(RU_${clust}_PI${idx} RU_issue_${clust}));
    }
    //  $for (idx in $0..(vec_float_perm_units-1)) {
    //    RT_${clust}_PF${idx}(use(RU_${clust}_PF${idx} RU_issue_${clust}));
    //  }
    $for (idx in $0..(vec_integer_xfr_units-1)) {
      RT_${clust}_xi${idx}(use(RU_${clust}_xi${idx} RU_issue_${clust}));
    }
    //  $for (idx in $0..(vec_float_xfr_units-1)) {
    //    RT_${clust}_xf${idx}(use(RU_${clust}_xf${idx} RU_issue_${clust}));
    //  }

  }
 
  $for (idx in $0..(icmove_bw-1)) {
     RT_icm_${idx}(use(RU_icm_${idx}));
  }
}

// *************************************************************
// Scheduling Alternatives

// Scheduling Alternative describes a unit specific alternative.

SECTION Scheduling_Alternative
{

  $for(clust in $0.. (num_clusters-1)) {
    $for (idx in $0..(integer_units-1)) {
      SA_intarith1_int_${clust}_i${idx}(format(OF_intarith1_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_intarith2_int_${clust}_i${idx}(format(OF_intarith2_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_intarith3_int_${clust}_i${idx}(format(OF_intarith3_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_intarith2_intshift_${clust}_i${idx}(format(OF_intarith2_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_intarith2_intsatadd_${clust}_i${idx}(format(OF_intarith2_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));

      SA_intarith2_intsataddl_${clust}_i${idx}(format(OF_intarith2_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_intarith2_intsatsub_${clust}_i${idx}(format(OF_intarith2_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_intarith2_intsatsubl_${clust}_i${idx}(format(OF_intarith2_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_intarith2_intdiv_${clust}_i${idx}(format(OF_intarith2_${clust}) latency(OL_intdiv) resv(RT_${clust}_i${idx}));
      SA_intarith2_intmpy_${clust}_i${idx}(format(OF_intarith2_${clust}) latency(OL_intmpy) resv(RT_${clust}_i${idx}));
      SA_intarith2_intwidempy_${clust}_i${idx}(format(OF_intarith2_wide_${clust}) latency(OL_intmpy) resv(RT_${clust}_i${idx}));
      SA_intarith3_intaddcarry_${clust}_i${idx}(format(OF_intarith3_wide_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_intarith2_intsatmpy_${clust}_i${idx}(format(OF_intarith2_${clust}) latency(OL_intmpy) resv(RT_${clust}_i${idx}));
      SA_intarith2_intsatmpyl_${clust}_i${idx}(format(OF_intarith2_${clust}) latency(OL_intmpy) resv(RT_${clust}_i${idx}));
      SA_intarith3_intsatmpyadd_${clust}_i${idx}(format(OF_intarith3_${clust}) latency(OL_intmpy) resv(RT_${clust}_i${idx}));
      SA_intarith3_intsatmpyaddn_${clust}_i${idx}(format(OF_intarith3_${clust}) latency(OL_intmpy) resv(RT_${clust}_i${idx}));
      SA_intarith3_intsatmpysub_${clust}_i${idx}(format(OF_intarith3_${clust}) latency(OL_intmpy) resv(RT_${clust}_i${idx}));
      SA_intarith3_intsatmpyrsub_${clust}_i${idx}(format(OF_intarith3_${clust}) latency(OL_intmpy) resv(RT_${clust}_i${idx}));
      SA_intarith3_intmpy_${clust}_i${idx}(format(OF_intarith3_${clust}) latency(OL_intmpy) resv(RT_${clust}_i${idx}));

      SA_intcmpr_int_${clust}_i${idx}(format(OF_intcmpr_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_intcmpp_int_${clust}_i${idx}(format(OF_intcmpp_${clust}) latency(OL_intcmpp) resv(RT_${clust}_i${idx}));
      SA_sext_int_${clust}_i${idx}(format(OF_sext_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));

      SA_moveip_int_${clust}_i${idx}(format(OF_moveip_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_movepi_int_${clust}_i${idx}(format(OF_movepi_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_pred_int_${clust}_i${idx}(format(OF_pred_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));

      // Move/extract bits to/from pred -- Shail Aditya 05/26/98
      SA_movegbp_int_${clust}_i${idx}(format(OF_movegbp_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_movegcm_int_${clust}_i${idx}(format(OF_movegcm_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));

      // HPL-PD 2.0 Extn
      SA_intlitmove_int_${clust}_i${idx}(format(OF_intlitmove_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_btrlitmove_int_${clust}_i${idx}(format(OF_btrlitmove_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_pbrlit_int_${clust}_i${idx}(format(OF_pbrlit_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
  
      // Agressive pred_clear, pred_set
      SA_pred_null_${clust}_i${idx}(format(OF_pred_${clust}) latency(OL_int) resv(RT_null));
      SA_branch_int_${clust}_i${idx}(format(OF_branch_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));

      // Intra-cluster moves
      SA_moveii_int_${clust}_${clust}_i${idx}(format(OF_moveii_${clust}_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_movepp_int_${clust}_${clust}_i${idx}(format(OF_movepp_${clust}_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_movegg_int_${clust}_${clust}_i${idx}(format(OF_movegg_${clust}_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_movebb_int_${clust}_${clust}_i${idx}(format(OF_movebb_${clust}_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_movegc_int_${clust}_${clust}_i${idx}(format(OF_movegc_${clust}_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
      SA_movecg_int_${clust}_${clust}_i${idx}(format(OF_movecg_${clust}_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
	      
      // Bit extraction ops	
      SA_bit_extraction_${clust}_i${idx}(format(OF_intarith3_${clust}) latency(OL_int) resv(RT_${clust}_i${idx}));
    }
  }

  // Inter-cluster moves
  $for(clust in $0.. (num_clusters-1)) {
    $for(clust2 in $0.. (num_clusters-1)) {
      $for (idx in $0..(icmove_bw-1)) { 
        $if (${clust} != ${clust2}) {
          SA_moveii_int_${clust}_${clust2}_i${idx}(format(OF_moveii_${clust}_${clust2}) latency(OL_int) resv(RT_icm_${idx}));
          SA_movepp_int_${clust}_${clust2}_i${idx}(format(OF_movepp_${clust}_${clust2}) latency(OL_int) resv(RT_icm_${idx}));
          SA_movegg_int_${clust}_${clust2}_i${idx}(format(OF_movegg_${clust}_${clust2}) latency(OL_int) resv(RT_icm_${idx}));
          SA_movebb_int_${clust}_${clust2}_i${idx}(format(OF_movebb_${clust}_${clust2}) latency(OL_int) resv(RT_icm_${idx}));

          SA_movegc_int_${clust}_${clust2}_i${idx}(format(OF_movegc_${clust}_${clust2}) latency(OL_int) resv(RT_icm_${idx}));
          SA_movecg_int_${clust}_${clust2}_i${idx}(format(OF_movecg_${clust}_${clust2}) latency(OL_int) resv(RT_icm_${idx}));
          SA_moveff_float_${clust}_${clust2}_f${idx}(format(OF_moveff_${clust}_${clust2}) latency(OL_float) resv(RT_icm_${idx}));
        }
      }
    }
  }

  // Inter-cluster vector moves
  $for(clust in $0.. (num_clusters-1)) {
    $for(clust2 in $0.. (num_clusters-1)) {
      $for (idx in $0..(icmove_bw-1)) { 
        $if (${clust} != ${clust2}) {
          SA_vec_icm_moveii_int_${clust}_${clust2}_I${idx}(format(OF_vec_moveii_${clust}_${clust2}) latency(OL_vec_int) resv(RT_icm_${idx}));
          SA_vec_icm_moveff_float_${clust}_${clust2}_F${idx}(format(OF_vec_moveff_${clust}_${clust2}) latency(OL_vec_floatmove) resv(RT_icm_${idx}));
          SA_vec_icm_movemm_int_${clust}_${clust2}_I${idx}(format(OF_vec_movemm_${clust}_${clust2}) latency(OL_vec_int) resv(RT_icm_${idx}));
        }
      }
    }
  }


  $for(clust in $0.. (num_clusters-1)) {
    $for (idx in $0..(float_units-1)) {
      SA_floatarith1_float_${clust}_f${idx}(format(OF_floatarith1_${clust}) latency(OL_float) resv(RT_${clust}_f${idx}));
      SA_floatarith1_floatdiv_${clust}_f${idx}(format(OF_floatarith1_${clust}) latency(OL_floatdiv) resv(RT_${clust}_f${idx}));
      SA_floatarith2_float_${clust}_f${idx}(format(OF_floatarith2_${clust}) latency(OL_float) resv(RT_${clust}_f${idx}));
      SA_floatarith2_floatdiv_${clust}_f${idx}(format(OF_floatarith2_${clust}) latency(OL_floatdiv) resv(RT_${clust}_f${idx}));
      SA_floatarith2_floatmpy_${clust}_f${idx}(format(OF_floatarith2_${clust}) latency(OL_floatmpy) resv(RT_${clust}_f${idx}));
      SA_floatarith3_floatmpy_${clust}_f${idx}(format(OF_floatarith3_${clust}) latency(OL_floatmpy) resv(RT_${clust}_f${idx}));

      SA_floatcmpr_float_${clust}_f${idx}(format(OF_floatcmpr_${clust}) latency(OL_float) resv(RT_${clust}_f${idx}));
      SA_floatcmpp_float_${clust}_f${idx}(format(OF_floatcmpp_${clust}) latency(OL_floatcmpp) resv(RT_${clust}_f${idx}));

      SA_convif_float_${clust}_f${idx}(format(OF_moveif_${clust}) latency(OL_float) resv(RT_${clust}_f${idx}));
      SA_convff_float_${clust}_f${idx}(format(OF_moveff_${clust}_${clust}) latency(OL_float) resv(RT_${clust}_f${idx}));
      SA_convfi_float_${clust}_f${idx}(format(OF_movefi_${clust}) latency(OL_float) resv(RT_${clust}_f${idx}));

      // HPL-PD 2.0 Extn
      SA_floatlitmove_float_${clust}_f${idx}(format(OF_floatlitmove_${clust}) latency(OL_float) resv(RT_${clust}_f${idx}));

      // Intra-cluster float move
      SA_moveff_float_${clust}_${clust}_f${idx}(format(OF_moveff_${clust}_${clust}) latency(OL_float) resv(RT_${clust}_f${idx}));
    }
  }

  $for(clust in $0.. (num_clusters-1)) {
    $for (idx in $0..(memory_units-1)) {
      // standard loads
      $for(format in intload intloadinc floatload floatloadinc intloadgdisp 
           intloadext intloadgdispext floatloadgdisp) {
        $for((src in C1 C2 C3) (lat in load1 load2 load3)) {
  	  SA_${format}_std_${src}_${clust}_m${idx}(format(OF_${format}_${clust}) latency(OL_${lat}) resv(RT_${clust}_m${idx}));
        }
      }

      // speculative loads
      $for(format in intload intloadinc floatload floatloadinc) {
        $for((src in C1 C2 C3) (lat in dsload1 dsload2 dsload3)) {
	  SA_${format}_spec_${src}_${clust}_m${idx}(format(OF_${format}_${clust}) latency(OL_${lat}) resv(RT_${clust}_m${idx}));
        }
      }

      // speculative load verify
      SA_intload_verify_${clust}_m${idx}(format(OF_intload_${clust}) latency(OL_dsload_verify) resv(RT_${clust}_m${idx})); 
      SA_floatload_verify_${clust}_m${idx}(format(OF_floatload_${clust}) latency(OL_dsload_verify) resv(RT_${clust}_m${idx}));

      // standard stores
      $for(format in intstore intstoreinc floatstore floatstoreinc intstoregdisp floatstoregdisp){
        SA_${format}_std_${clust}_m${idx}(format(OF_${format}_${clust}) latency(OL_store) resv(RT_${clust}_m${idx}));
      }

      SA_moveif_C1_${clust}_m${idx}(format(OF_moveif_${clust}) latency(OL_load1) resv(RT_${clust}_m${idx}));
      SA_movefi_C1_${clust}_m${idx}(format(OF_movefi_${clust}) latency(OL_load1) resv(RT_${clust}_m${idx}));
      SA_predload_C1_${clust}_m${idx}(format(OF_predload_${clust}) latency(OL_load1) resv(RT_${clust}_m${idx}));
      SA_predstore_store_${clust}_m${idx}(format(OF_predstore_${clust}) latency(OL_store) resv(RT_${clust}_m${idx}));

      // Explicit save/restore formats - Shail Aditya 05/26/98
      SA_intsave_store_${clust}_m${idx}(format(OF_intsave_${clust}) latency(OL_store) resv(RT_${clust}_m${idx}));
      SA_intrestore_C1_${clust}_m${idx}(format(OF_intrestore_${clust}) latency(OL_load1) resv(RT_${clust}_m${idx}));
      SA_floatsave_store_${clust}_m${idx}(format(OF_floatsave_${clust}) latency(OL_store) resv(RT_${clust}_m${idx}));
      SA_floatrestore_C1_${clust}_m${idx}(format(OF_floatrestore_${clust}) latency(OL_load1) resv(RT_${clust}_m${idx}));
      SA_brsave_store_${clust}_m${idx}(format(OF_brsave_${clust}) latency(OL_store) resv(RT_${clust}_m${idx}));
      SA_brrestore_C1_${clust}_m${idx}(format(OF_brrestore_${clust}) latency(OL_load1) resv(RT_${clust}_m${idx}));
      SA_psave_store_${clust}_m${idx}(format(OF_psave_${clust}) latency(OL_store) resv(RT_${clust}_m${idx}));
      SA_prestore_C1_${clust}_m${idx}(format(OF_prestore_${clust}) latency(OL_load1) resv(RT_${clust}_m${idx}));

      SA_intsaveg_store_${clust}_m${idx}(format(OF_intsaveg_${clust}) latency(OL_store) resv(RT_${clust}_m${idx}));
      SA_intrestoreg_C1_${clust}_m${idx}(format(OF_intrestoreg_${clust}) latency(OL_load1) resv(RT_${clust}_m${idx}));
      SA_floatsaveg_store_${clust}_m${idx}(format(OF_floatsaveg_${clust}) latency(OL_store) resv(RT_${clust}_m${idx}));
      SA_floatrestoreg_C1_${clust}_m${idx}(format(OF_floatrestoreg_${clust}) latency(OL_load1) resv(RT_${clust}_m${idx}));
      SA_brsaveg_store_${clust}_m${idx}(format(OF_brsaveg_${clust}) latency(OL_store) resv(RT_${clust}_m${idx}));
      SA_brrestoreg_C1_${clust}_m${idx}(format(OF_brrestoreg_${clust}) latency(OL_load1) resv(RT_${clust}_m${idx}));
      SA_psaveg_store_${clust}_m${idx}(format(OF_psaveg_${clust}) latency(OL_store) resv(RT_${clust}_m${idx}));
      SA_prestoreg_C1_${clust}_m${idx}(format(OF_prestoreg_${clust}) latency(OL_load1) resv(RT_${clust}_m${idx}));

      // added vector support - parkhc 01/2007
      SA_vec_intsave_store_${clust}_m${idx}(format(OF_vec_intsave_${clust}) latency(OL_vec_store) resv(RT_${clust}_m${idx}));
      SA_vec_intrestore_C1_${clust}_m${idx}(format(OF_vec_intrestore_${clust}) latency(OL_vec_load1) resv(RT_${clust}_m${idx}));
      SA_vec_floatsave_store_${clust}_m${idx}(format(OF_vec_floatsave_${clust}) latency(OL_vec_store) resv(RT_${clust}_m${idx}));
      SA_vec_floatrestore_C1_${clust}_m${idx}(format(OF_vec_floatrestore_${clust}) latency(OL_vec_load1) resv(RT_${clust}_m${idx}));
      SA_vec_intsaveg_store_${clust}_m${idx}(format(OF_vec_intsaveg_${clust}) latency(OL_vec_store) resv(RT_${clust}_m${idx}));
      SA_vec_intrestoreg_C1_${clust}_m${idx}(format(OF_vec_intrestoreg_${clust}) latency(OL_vec_load1) resv(RT_${clust}_m${idx}));
      SA_vec_floatsaveg_store_${clust}_m${idx}(format(OF_vec_floatsaveg_${clust}) latency(OL_vec_store) resv(RT_${clust}_m${idx}));
      SA_vec_floatrestoreg_C1_${clust}_m${idx}(format(OF_vec_floatrestoreg_${clust}) latency(OL_vec_load1) resv(RT_${clust}_m${idx}));
    }
  }

  $for(clust in $0.. (num_clusters-1)) {
    $for (idx in $0..(branch_units-1)) {
      SA_brucond_branch_${clust}_b${idx}(format(OF_brucond_${clust}) latency(OL_branch) resv(RT_${clust}_b${idx}));
      SA_brcond_branch_${clust}_b${idx}(format(OF_brcond_${clust}) latency(OL_branch) resv(RT_${clust}_b${idx}));
      SA_brlink_branch_${clust}_b${idx}(format(OF_brlink_${clust}) latency(OL_branch) resv(RT_${clust}_b${idx}));
      SA_brtop_branch_${clust}_b${idx}(format(OF_brtop_${clust}) latency(OL_branch) resv(RT_${clust}_b${idx}));
      SA_brlc_branch_${clust}_b${idx}(format(OF_brlc_${clust}) latency(OL_branch) resv(RT_${clust}_b${idx}));
      SA_brdvi_branch_${clust}_b${idx}(format(OF_brdvi_${clust}) latency(OL_branch) resv(RT_${clust}_b${idx}));
      SA_brdvf_branch_${clust}_b${idx}(format(OF_brdvf_${clust}) latency(OL_branch) resv(RT_${clust}_b${idx}));
    }
  }

  // HPL-PD 2.0 Extn
  $if (${local_memories} != 0) {
    $for(clust in $0.. (num_clusters-1)) {
      $for ((lmid in $1..(local_memories)) (idx in local_memory_units_per_lmem)) {
        $for (jdx in $0..(${idx}-1)) {
          SA_intload_localmem_${clust}_lm${lmid}_${jdx}(format(OF_intload_${clust}) latency(OL_load_localmem) resv(RT_${clust}_lm${lmid}_${jdx}));
          SA_floatload_localmem_${clust}_lm${lmid}_${jdx}(format(OF_floatload_${clust}) latency(OL_load_localmem) resv(RT_${clust}_lm${lmid}_${jdx}));
          SA_intstore_localmem_${clust}_lm${lmid}_${jdx}(format(OF_intstore_${clust}) latency(OL_store_localmem) resv(RT_${clust}_lm${lmid}_${jdx}));
          SA_floatstore_localmem_${clust}_lm${lmid}_${jdx}(format(OF_floatstore_${clust}) latency(OL_store_localmem) resv(RT_${clust}_lm${lmid}_${jdx}));
        }
      }
    }
  }

  // SLARSEN: Vector units
  $for (clust in $0.. (num_clusters-1)) {
    $for (idx in $0..(vec_integer_units-1)) {
      SA_vec_intarith2_int_${clust}_I${idx}(format(OF_vec_intarith2_${clust}) latency(OL_vec_int) 
          resv(RT_${clust}_I${idx}));
      SA_vec_intarith2_intdiv_${clust}_I${idx}(format(OF_vec_intarith2_${clust}) latency(OL_vec_intdiv) 
          resv(RT_${clust}_I${idx}));
      SA_vec_intarith2_intmpy_${clust}_I${idx}(format(OF_vec_intarith2_${clust}) latency(OL_vec_intmpy) 
          resv(RT_${clust}_I${idx}));
      SA_vec_sext_int_${clust}_I${idx}(format(OF_vec_sext_${clust}) latency(OL_vec_int) 
          resv(RT_${clust}_I${idx}));
      SA_vec_moveii_int_${clust}_I${idx}(format(OF_vec_moveii_${clust}) latency(OL_vec_int) 
          resv(RT_${clust}_I${idx}));
      SA_vec_movemm_int_${clust}_I${idx}(format(OF_vec_movemm_${clust}) latency(OL_vec_int) 
          resv(RT_${clust}_I${idx}));
    }

//    $for (idx in $0..(vec_float_units-1)) {
//      SA_vec_floatarith1_float_${clust}_F${idx}(format(OF_vec_floatarith1_${clust}) 
//          latency(OL_vec_float) resv(RT_${clust}_F${idx}));
//      SA_vec_floatarith2_float_${clust}_F${idx}(format(OF_vec_floatarith2_${clust}) 
//          latency(OL_vec_float) resv(RT_${clust}_F${idx}));
//      SA_vec_floatarith1_floatdiv_${clust}_F${idx}(format(OF_vec_floatarith1_${clust}) 
//          latency(OL_vec_floatdiv) resv(RT_${clust}_F${idx}));
//      SA_vec_floatarith2_floatdiv_${clust}_F${idx}(format(OF_vec_floatarith2_${clust}) 
//          latency(OL_vec_floatdiv) resv(RT_${clust}_F${idx}));
//      SA_vec_floatarith2_floatmpy_${clust}_F${idx}(format(OF_vec_floatarith2_${clust}) 
//          latency(OL_vec_floatmpy) resv(RT_F${idx}));
//      SA_vec_moveff_float_${clust}_F${idx}(format(OF_vec_moveff_${clust}) 
//          latency(OL_vec_floatmove) resv(RT_${clust}_F${idx}));
//      SA_vec_convif_float_${clust}_F${idx}(format(OF_vec_moveif_${clust}) 
//          latency(OL_vec_float) resv(RT_${clust}_F${idx}));
//      SA_vec_convff_float_${clust}_F${idx}(format(OF_vec_moveff_${clust}) 
//          latency(OL_vec_float) resv(RT_${clust}_F${idx}));
//      SA_vec_convfi_float_${clust}_F${idx}(format(OF_vec_movefi_${clust}) 
//          latency(OL_vec_float) resv(RT_${clust}_F${idx}));
//    }

    $for (idx in $0..(vec_integer_units-1)) {
      SA_vec_floatarith1_float_${clust}_F${idx}(format(OF_vec_floatarith1_${clust}) 
          latency(OL_vec_float) resv(RT_${clust}_I${idx}));
      SA_vec_floatarith2_float_${clust}_F${idx}(format(OF_vec_floatarith2_${clust}) 
          latency(OL_vec_float) resv(RT_${clust}_I${idx}));
      SA_vec_floatarith1_floatdiv_${clust}_F${idx}(format(OF_vec_floatarith1_${clust}) 
          latency(OL_vec_floatdiv) resv(RT_${clust}_I${idx}));
      SA_vec_floatarith2_floatdiv_${clust}_F${idx}(format(OF_vec_floatarith2_${clust}) 
          latency(OL_vec_floatdiv) resv(RT_${clust}_I${idx}));
      SA_vec_floatarith2_floatmpy_${clust}_F${idx}(format(OF_vec_floatarith2_${clust}) 
          latency(OL_vec_floatmpy) resv(RT_${clust}_I${idx}));
      SA_vec_moveff_float_${clust}_F${idx}(format(OF_vec_moveff_${clust}) 
          latency(OL_vec_floatmove) resv(RT_${clust}_I${idx}));
      SA_vec_convif_float_${clust}_F${idx}(format(OF_vec_moveif_${clust}) 
          latency(OL_vec_float) resv(RT_${clust}_I${idx}));
      SA_vec_convff_float_${clust}_F${idx}(format(OF_vec_moveff_${clust}) 
          latency(OL_vec_float) resv(RT_${clust}_I${idx}));
      SA_vec_convfi_float_${clust}_F${idx}(format(OF_vec_movefi_${clust}) 
          latency(OL_vec_float) resv(RT_${clust}_I${idx}));
    }

    $for (idx in $0..(vec_integer_xfr_units-1)) {
      SA_vec_intvsmove_int_${clust}_xi${idx}(format(OF_vec_intvsmove_${clust}) 
          latency(OL_vec_intxfr) resv(RT_${clust}_xi${idx}));
      SA_vec_intsvmove_int_${clust}_xi${idx}(format(OF_vec_intsvmove_${clust}) 
          latency(OL_vec_intxfr) resv(RT_${clust}_xi${idx}));
      SA_vec_intsplat_int_${clust}_xi${idx}(format(OF_vec_intsplat_${clust}) 
          latency(OL_vec_intxfr) resv(RT_${clust}_xi${idx}));
    }
  
//    $for (idx in $0..(vec_float_xfr_units-1)) {
//      SA_vec_floatvsmove_float_${clust}_xf${idx}(format(OF_vec_floatvsmove_${clust}) 
//          latency(OL_vec_floatxfr) resv(RT_${clust}_xf${idx}));
//      SA_vec_floatsvmove_float_${clust}_xf${idx}(format(OF_vec_floatsvmove_${clust}) 
//          latency(OL_vec_floatxfr) resv(RT_${clust}_xf${idx}));
//      SA_vec_floatsplat_float_${clust}_xf${idx}(format(OF_vec_floatsplat_${clust}) 
//          latency(OL_vec_floatxfr) resv(RT_${clust}_xf${idx}));
//    }

    $for (idx in $0..(vec_integer_xfr_units-1)) {
      SA_vec_floatvsmove_float_${clust}_xf${idx}(format(OF_vec_floatvsmove_${clust}) 
          latency(OL_vec_floatxfr) resv(RT_${clust}_xi${idx}));
      SA_vec_floatsvmove_float_${clust}_xf${idx}(format(OF_vec_floatsvmove_${clust}) 
          latency(OL_vec_floatxfr) resv(RT_${clust}_xi${idx}));
      SA_vec_floatsplat_float_${clust}_xf${idx}(format(OF_vec_floatsplat_${clust}) 
          latency(OL_vec_floatxfr) resv(RT_${clust}_xi${idx}));
    }

    $for (idx in $0..(memory_units-1)) {
      $for (format in vec_intload vec_floatload vec_intloadgdisp vec_floatloadgdisp 
            vec_intload_elem vec_floatload_elem vec_intloadgdisp_elem vec_floatloadgdisp_elem) {
        SA_${format}_C1_${clust}_m${idx}(format(OF_${format}_${clust}) 
            latency(OL_vec_load1) resv(RT_${clust}_m${idx}));
      }

      $for(format in vec_intstore vec_floatstore vec_intstoregdisp vec_floatstoregdisp
           vec_intstore_elem vec_floatstore_elem vec_intstoregdisp_elem vec_floatstoregdisp_elem){
        SA_${format}_${clust}_m${idx}(format(OF_${format}_${clust}) 
            latency(OL_vec_store) resv(RT_${clust}_m${idx}));
      }
    }

    $for (idx in $0..(vec_integer_perm_units-1)) {
      SA_vec_intperm_int_${clust}_PI${idx}(format(OF_vec_intperm_${clust}) 
          latency(OL_vec_intperm) resv(RT_${clust}_PI${idx}));
    }
//    $for (idx in $0..(vec_float_perm_units-1)) {
//      SA_vec_floatperm_float_${clust}_PF${idx}(format(OF_vec_floatperm_${clust}) 
//          latency(OL_vec_floatperm) resv(RT_${clust}_PF${idx}));
//    }
    $for (idx in $0..(vec_integer_perm_units-1)) {
      SA_vec_floatperm_float_${clust}_PF${idx}(format(OF_vec_floatperm_${clust}) 
          latency(OL_vec_floatperm) resv(RT_${clust}_PI${idx}));
    }
  }
}

// *************************************************************
// HPL-PD Operations (Architecture Version 1.0)

SECTION Operation
{
  // **** Integer operations ****
  $for (clust in $0..(num_clusters-1)) {
    $for (idx in $0..(integer_units-1)) {

      // Table 2: Integer computation operations 
      $for (class in intarith1_int intarith2_int intarith2_intshift intarith2_intdiv intarith2_intmpy intarith3_intmpy) {
        $for (op in ${OP_${class}}) {
	  $for(w in ${int_alu_widths}) {
	    "${op}_${w}_${clust}.${idx}"(alt(SA_${class}_${clust}_i${idx}));
	  }
        }
      }

      $for (op in MPY_WIDE MPYL_WIDE) {
        $for(w in ${int_alu_widths}) {
          "${op}_${w}_${clust}.${idx}"(alt!(SA_intarith2_intwidempy_${clust}_i${idx}));
        }
      }

      $for (op in ADD_CARRY SUB_CARRY ADDL_CARRY SUBL_CARRY) {
        $for(w in ${int_alu_widths}) {
          "${op}_${w}_${clust}.${idx}"(alt!(SA_intarith3_intaddcarry_${clust}_i${idx}));
        }
      }

      // Saturating arithmetic
      $for (class in intarith2_intsatadd intarith2_intsataddl intarith2_intsatsub intarith2_intsatsubl 
                     intarith2_intsatmpy intarith2_intsatmpyl intarith3_intsatmpyadd intarith3_intsatmpyaddn 
                     intarith3_intsatmpysub intarith3_intsatmpyrsub) {
        $for (op in ${OP_${class}}) {
	  $for(w in ${int_alu_widths}) {
	    $for (i in $1..32) {
  	      "${op}${i}_${w}_${clust}.${idx}"(alt(SA_${class}_${clust}_i${idx}));
	    }
	  }
        }
      }

      // Table 4: Conversion operations 
      $for(op in ${OP_sign_extend}){
        $for(w in ${int_extract_widths}){
 	  "${op}_${w}_${clust}.${idx}"(alt(SA_sext_int_${clust}_i${idx}));
        }
      }

      // Bit extraction ops
      $for (op in ${OP_bit_extraction}) {
        $for(w in ${int_alu_widths}){
	  "${op}_${w}_${clust}.${idx}"(alt(SA_bit_extraction_${clust}_i${idx}));
	}
      }

      // Table 5: Move operations

//  Operations to be included in the future.  mchu (7.24.2003)

//      $for(class in movepi movegbp movegcm){
//        $for(op in ${OP_${class}}){
//	  "${op}_${clust}.${idx}"(alt(SA_${class}_int_${clust}_i${idx}));
//        }
//      }

      // I need this for predicate spill code. -ntclark 1/2005
      $for(class in movegbp){
        $for(op in ${OP_${class}}){
	  "${op}_${clust}.${idx}"(alt(SA_${class}_int_${clust}_i${idx}));
        }
      }

      $for(class in movepi moveip){
        $for(op in ${OP_${class}}){
	  "${op}_${clust}.${idx}"(alt(SA_${class}_int_${clust}_i${idx}));
        }
      }


      $for (clust2 in $0..(num_clusters-1)) {
        $for(class in moveii) {
          $for(op in ${OP_${class}}) {
            $if(${clust} == ${clust2}) {
	      "${op}_${clust}_${clust2}.${idx}"(alt(SA_${class}_int_${clust}_${clust2}_i${idx}));
	    }
          }
        }
      }

      // Mass clear operation for PR
      $for(op in ${OP_mass_pred_clear}) {
       "${op}_${clust}.${idx}"(alt(SA_pred_int_${clust}_i${idx}));
      }

      // Move pred operations
      $for (clust2 in $0..(num_clusters-1)) {
        $for(class in movepp) {
          $for(op in ${OP_${class}}) {
            $if(${clust} == ${clust2}) {	
	      "${op}_${clust}_${clust2}.${idx}"(alt(SA_${class}_int_${clust}_${clust2}_i${idx}));
	    }
          }
        }
      }

      $for(op in ${OP_pred_writes}){
        "${op}_${clust}.${idx}"(alt(SA_pred_null_${clust}_i${idx}));
      }

      // HPL-PD 2.0 Extn
      // Split moves instead of MOVE
      $for (clust2 in $0..(num_clusters-1)) {
        $for(class in movegc movecg){
          $for(op in ${OP_${class}}) {
            $if(${clust} == ${clust2}) {
	      "${op}_${clust}_${clust2}.${idx}"(alt(SA_${class}_int_${clust}_${clust2}_i${idx}));
	    }
          }
        }
      }

      // HPL-PD 2.0 Extn
      // Split moves instead of MOV
      $for (clust2 in $0..(num_clusters-1)) {
        $for(class in movegg movebb){
          $for(op in ${OP_${class}}) {
            $if(${clust} == ${clust2}) {
  	      "${op}_${clust}_${clust2}.${idx}"(alt(SA_${class}_int_${clust}_${clust2}_i${idx}));
	    }
          }
        }
      }

      // Int literal moves to GPR
      $for(op in ${OP_int_literal_moves}) {
        "${op}_${clust}.${idx}"(alt(SA_intlitmove_int_${clust}_i${idx}));
      }
 
      // Table 8: Compare-to-register operations
      $for(op in ${OP_int_compare_to_reg}){
        $for(w in ${int_alu_widths}){
	  $for(ic in ${integer_compare_conds}){
	    "${op}_${w}_${ic}_${clust}.${idx}"(alt(SA_intcmpr_int_${clust}_i${idx}));
  	  }
        }
      }

      // Table 9: Two-target compare-to-predicate operations
      $for(op in ${OP_int_cmp_pred_two}){
        $for(w in ${int_alu_widths}){
	  $for(ic in ${integer_compare_conds}){
	    $for(da1 in ${cmpp_dest_actions}){
	      $for(da2 in ${cmpp_dest_actions}){	
	        "${op}_${w}_${ic}_${da1}_${da2}_${clust}.${idx}"(alt(SA_intcmpp_int_${clust}_i${idx}));
  	      }
	    }
	  }
        }
      }

/*  ----------
      // HPL-PD 2.0 extension: One target compare to predicate operations. 
      $for(op in ${OP_int_cmp_pred_one}){
        $for(w in ${int_alu_widths}){
	  $for(ic in ${integer_compare_conds}){
	    $for(da1 in ${cmpp_dest_actions}){
	      "${op}_${w}_${ic}_${da1}_${clust}.${idx}"(alt(SA_intcmppi_int_${clust}_i${idx}));
            }
       	  }
        }
      }
--------- */

      // Table 16: Prepare to branch (cast on int unit)
      $for(op in ${OP_pbrs}){
        "${op}_${clust}.${idx}"(alt(SA_branch_int_${clust}_i${idx}));
      }

      // HPL-PD 2.0 extn
      // literal moves to BTR
      $for(op in ${OP_btr_literal_moves}) {
        "${op}_${clust}.${idx}"(alt(SA_btrlitmove_int_${clust}_i${idx}));
      }
    } // end **** Integer Operations ****
  } // end {clust}


  // **** Float Operations ****
  $for (clust in $0..(num_clusters-1)) {
    $for (idx in $0..(float_units-1)){

      // Table 3: Floating-point computation operations
      $for (class in floatarith1_float floatarith1_floatdiv floatarith2_float 
                     floatarith2_floatdiv floatarith2_floatmpy floatarith3_floatmpy) {
        $for(op in ${OP_${class}}) {
	  $for(w in ${float_widths}) {
	    "${op}_${w}_${clust}.${idx}"(alt(SA_${class}_${clust}_f${idx}));
          }
        }
      }

      // Table 4: Conversion operations 
      $for(class in convif convfi convff){
        $for(op in ${OP_${class}}){
	  "${op}_${clust}.${idx}"(alt(SA_${class}_float_${clust}_f${idx}));
        }
      }

      // Table 5: Move operations
      $for (clust2 in $0..(num_clusters-1)) {      
        $for(op in ${OP_moveff}){
          $for(w in ${float_widths}){
            $if(${clust} == ${clust2}) {
              "${op}_${w}_${clust}_${clust2}.${idx}"(alt(SA_moveff_float_${clust}_${clust2}_f${idx}));
	    }
          }
        }
      }

      // HPL-PD 2.0 Extn
      // Float literal moves to FPR
      $for(op in ${OP_float_literal_moves}) {
        "${op}_${clust}.${idx}"(alt(SA_floatlitmove_float_${clust}_f${idx}));
      }

      // Table 8: Compare-to-register operations
      $for(op in ${OP_float_compare_to_reg}){
        $for(w in ${float_widths}){
	  $for(fc in ${float_compare_conds}){
	    "${op}_${w}_${fc}_${clust}.${idx}"(alt(SA_floatcmpr_float_${clust}_f${idx}));
	  }
        }
      }

      // Table 9: Two-target compare-to-predicate operations
      $for(op in ${OP_float_cmp_pred_two}){
        $for(w in ${float_widths}){
	  $for(fc in ${float_compare_conds}){
	    $for(da1 in ${cmpp_dest_actions}){
	      $for(da2 in ${cmpp_dest_actions}){	
	        "${op}_${w}_${fc}_${da1}_${da2}_${clust}.${idx}"(alt(SA_floatcmpp_float_${clust}_f${idx}));
              }
	    }
	  }
        }
      }

/*  ----------
      // HPL-PD 2.0 extension: One target compare to predicate operations. 
      $for(op in ${OP_float_cmp_pred_one}){
        $for(w in ${float_widths}){
	  $for(fc in ${float_compare_conds}){
	    $for(da1 in ${cmpp_dest_actions}){
	      "${op}_${w}_${fc}_${da1}_${clust}.${idx}"(alt(SA_floatcmppi_float_${clust}_f${idx}));
	    }
	  }
        }
      }
--------- */
    } // end **** Float Operations ****
  } // end {clust}


  // ****; Memory Operations ****
  $for (clust in $0..(num_clusters-1)) {
    $for (idx in $0..(memory_units-1)){

      // Table 5: Move operations
      $for (class in moveif movefi){
        $for(op in ${OP_${class}}){
	  $for(rh in ${float_register_halves}){
	    "${op}_${rh}_${clust}.${idx}"(alt(SA_${class}_C1_${clust}_m${idx}));
	  }
        }
      }

      // Table 12, 13, 14: Load/store operations for cache/main memory
      // Integer load ops
      $for(class in intload_std intloadinc_std intload_spec intloadinc_spec intloadgdisp_std 
                    intloadext_std intloadgdispext_std) {
        $for(op in ${OP_${class}}){
	  $for(ss in ${latency_src_cache_specifiers}){
	    $for(ts in ${load_target_cache_specifiers}){
	      $for(w in ${int_mem_widths}){
	        "${op}_${w}_${ss}_${ts}_${clust}.${idx}"(alt(SA_${class}_${ss}_${clust}_m${idx}));
	      }
	    }
	  }
        }
      }

      // Float load ops
      $for(class in floatload_std floatloadinc_std floatload_spec floatloadinc_spec floatloadgdisp_std){
        $for(op in ${OP_${class}}){
	  $for(ss in ${latency_src_cache_specifiers}){
	    $for(ts in ${load_target_cache_specifiers}){
	      $for(w in ${float_widths}){
	        "${op}_${w}_${ss}_${ts}_${clust}.${idx}"(alt(SA_${class}_${ss}_${clust}_m${idx}));
	      }
	    }
	  }
        }
      }

      // Integer store ops
      $for(class in intstore_std intstoreinc_std intstoregdisp_std){
        $for(op in ${OP_${class}}){
	  $for(ts in ${store_target_cache_specifiers}){
	    $for(w in ${int_mem_widths}){
	      "${op}_${w}_${ts}_${clust}.${idx}"(alt(SA_${class}_${clust}_m${idx}));
	    }
	  }
        }
      }

      // Float store ops
      $for(class in floatstore_std floatstoreinc_std floatstoregdisp_std){
        $for(op in ${OP_${class}}){
	  $for(ts in ${store_target_cache_specifiers}){
	    $for(w in ${float_widths}){
	      "${op}_${w}_${ts}_${clust}.${idx}"(alt(SA_${class}_${clust}_m${idx}));
	    }
	  }
        }
      }

      // Int ldv ops
      $for(op in ${OP_intload_dv}){
        $for(w in ${int_mem_widths}){
	  "${op}_${w}_${clust}.${idx}"(alt(SA_intload_verify_${clust}_m${idx}));
        }
      }

      // Float ldv ops
      $for(op in ${OP_floatload_dv}){
        $for(w in ${float_widths}){
	  "${op}_${w}_${clust}.${idx}"(alt(SA_floatload_verify_${clust}_m${idx}));
        }
      }

      // Explicit save/restore formats - Shail Aditya 05/26/98
      $for(class in intsave floatsave brsave psave intsaveg floatsaveg brsaveg psaveg){
        $for(op in ${OP_${class}}){
	  "${op}_${clust}.${idx}"(alt(SA_${class}_store_${clust}_m${idx}));
        }
      }
      $for(class in intrestore floatrestore brrestore prestore intrestoreg floatrestoreg brrestoreg prestoreg){
        $for(op in ${OP_${class}}){
	  "${op}_${clust}.${idx}"(alt(SA_${class}_C1_${clust}_m${idx}));
        }
      }
      // added vector support - parkhc 01/2007
      $for(class in vec_intsave vec_floatsave vec_intsaveg vec_floatsaveg){
        $for(op in ${OP_${class}}){
	  "${op}_${clust}.${idx}"(alt(SA_${class}_store_${clust}_m${idx}));
        }
      }
      $for(class in vec_intrestore vec_floatrestore vec_intrestoreg vec_floatrestoreg){
        $for(op in ${OP_${class}}){
	  "${op}_${clust}.${idx}"(alt(SA_${class}_C1_${clust}_m${idx}));
        }
      }

      // Operations for predicate spilling. These will go away soon.
      $for(op in ${OP_pfill}){
        "${op}_${clust}.${idx}"(alt(SA_predload_C1_${clust}_m${idx}));
      }
      $for(op in ${OP_pspill}){
        "${op}_${clust}.${idx}"(alt(SA_predstore_store_${clust}_m${idx}));
      }

    } // end **** Memory Operations ****
  } // end {clust}

  // HPL-PD 2.0 Extn
  // **** Local Memory Operations ****
  $if (${local_memories} != 0) {
    $for (clust in $0..(num_clusters-1)) {
      $for ((lmid in $1..(local_memories)) (idx in local_memory_units_per_lmem)) {
        $for (jdx in $0..(${idx}-1)) {
          $for(op in ${OP_intload_local}){
	    $for(w in ${int_mem_widths}){
	      "${op}_${w}_L${lmid}_${clust}.${jdx}"(alt(SA_intload_localmem_${clust}_lm${lmid}_${jdx}));
	    }
          }
          $for(op in ${OP_floatload_local}){
	    $for(w in ${float_widths}){
	      "${op}_${w}_L${lmid}_${clust}.${jdx}"(alt(SA_floatload_localmem_${clust}_lm${lmid}_${jdx}));
	    }
          }
          $for(op in ${OP_intstore_local}){
	    $for(w in ${int_mem_widths}){
	      "${op}_${w}_L${lmid}_${clust}.${jdx}"(alt(SA_intstore_localmem_${clust}_lm${lmid}_${jdx}));
	    }
          }
          $for(op in ${OP_floatstore_local}){
	    $for(w in ${float_widths}){
	      "${op}_${w}_L${lmid}_${clust}.${jdx}"(alt(SA_floatstore_localmem_${clust}_lm${lmid}_${jdx}));
	    }
          }
        }
      }
    }  
  } // end *** Local Memory Operations ****

  // **** Branch Operations ****
  $for (clust in $0..(num_clusters-1)) {
    $for (idx in $0..(branch_units-1)){
      $for(class in brucond brcond brlink brlc brtop brdvi brdvf){
        $for(op in ${OP_${class}}){
	  "${op}_${clust}.${idx}"(alt(SA_${class}_branch_${clust}_b${idx}));
        }
      }
    } 
  } // end **** Branch Operations ****

  // **** Intercluster move operations ****
  $for (clust in $0..(num_clusters-1)) {
    $for (clust2 in $0..(num_clusters-1)) {
      $for (idx in $0..(icmove_bw-1)) {
        $for(class in movegg movebb movegc movecg movepp moveii){
          $for(op in ${OP_${class}}) {
            $if(${clust} != ${clust2}) {
    	      "${op}_${clust}_${clust2}.${idx}"(alt(SA_${class}_int_${clust}_${clust2}_i${idx}));
            }
          }
        }

        $for(op in ${OP_moveff}){
          $for(w in ${float_widths}){
            $if(${clust} != ${clust2}) {
              "${op}_${w}_${clust}_${clust2}.${idx}"(alt(SA_moveff_float_${clust}_${clust2}_f${idx}));
            }
          }
        }

        // Vector moves
        $for(class in vec_icm_moveii){
          $for(op in ${OP_${class}}) {
            $if(${clust} != ${clust2}) {
    	      "${op}_${clust}_${clust2}.${idx}"(alt(SA_${class}_int_${clust}_${clust2}_I${idx}));
            }
          }
        }

        $for(class in vec_icm_moveff){
          $for(op in ${OP_${class}}) {
            $for(w in ${float_widths}){     
            $if(${clust} != ${clust2}) {
    	      "${op}_${w}_${clust}_${clust2}.${idx}"(alt(SA_${class}_float_${clust}_${clust2}_F${idx}));
            }
            }
          }
        }

        $for(class in vec_icm_movemm){
          $for(op in ${OP_${class}}) {
            $if(${clust} != ${clust2}) {
    	      "${op}_${clust}_${clust2}.${idx}"(alt(SA_${class}_int_${clust}_${clust2}_I${idx}));
            }
          }
        }
      }
    }
  } // end **** Intercluster move operations ****

  // SLARSEN: Vector operations
  $for (clust in $0..(num_clusters-1)) {
    $for (idx in $0..(vec_integer_units-1)){
      $for (class in vec_intarith2_int vec_intarith2_intdiv vec_intarith2_intmpy){
        $for (op in ${OP_${class}}){
          $for(w in ${int_alu_widths}){
            "${op}_${w}_${clust}.${idx}"(alt(SA_${class}_${clust}_I${idx}));
          }
        }
      }

      $for(op in ${OP_vec_sign_extend}){
        $for(w in ${int_extract_widths}){
          "${op}_${w}_${clust}.${idx}"(alt(SA_vec_sext_int_${clust}_I${idx}));
        }
      }

      $for(class in vec_moveii){
        $for(op in ${OP_${class}}){
          "${op}_${clust}.${idx}"(alt(SA_${class}_int_${clust}_I${idx}));
        }
      }
    }

  //$for (idx in $0..(vec_float_units-1)){
    $for (idx in $0..(vec_integer_units-1)){
      $for (class in vec_floatarith1_float vec_floatarith1_floatdiv vec_floatarith2_float vec_floatarith2_floatdiv vec_floatarith2_floatmpy){
        $for(op in ${OP_${class}}){
          $for(w in ${float_widths}){
            "${op}_${w}_${clust}.${idx}"(alt(SA_${class}_${clust}_F${idx}));
          }
        }
      }

      $for(class in vec_convif vec_convfi vec_convff){
        $for(op in ${OP_${class}}){
          "${op}_${clust}.${idx}"(alt(SA_${class}_float_${clust}_F${idx}));
        }
      }

      $for(op in ${OP_vec_moveff}){
        $for(w in ${float_widths}){
          "${op}_${w}_${clust}.${idx}"(alt(SA_vec_moveff_float_${clust}_F${idx}));
        }
      }
    }

    // Transfer instructions
    $for (idx in $0..(vec_integer_xfr_units-1)){
      $for (class in vec_intvsmove vec_intsvmove){
        $for (op in ${OP_${class}}){
          "${op}_${clust}.${idx}"(alt(SA_${class}_int_${clust}_xi${idx}));
        }
      }
    }
     
  //$for (idx in $0..(vec_float_xfr_units-1)){
    $for (idx in $0..(vec_integer_xfr_units-1)){
      $for (class in vec_floatvsmove vec_floatsvmove){
        $for (op in ${OP_${class}}){
          $for(w in ${float_widths}){
            "${op}_${w}_${clust}.${idx}"(alt(SA_${class}_float_${clust}_xf${idx}));
          }
        }
      }
    }

    // Vector splat instructions
    $for (idx in $0..(vec_integer_xfr_units-1)){
      $for(op in ${OP_vec_intsplat}){
        "${op}_${clust}.${idx}"(alt(SA_vec_intsplat_int_${clust}_xi${idx}));
      }
    }

  //$for (idx in $0..(vec_float_xfr_units-1)){
    $for (idx in $0..(vec_integer_xfr_units-1)){
      $for(op in ${OP_vec_floatsplat}){
        $for(w in ${float_widths}){
          "${op}_${w}_${clust}.${idx}"(alt(SA_vec_floatsplat_float_${clust}_xf${idx}));
        }
      }
    }

    // Memory instructions
    $for (idx in $0..(memory_units-1)){
      // Vector integer load ops
      $for(class in vec_intload vec_intloadgdisp vec_intload_elem vec_intloadgdisp_elem){
        $for(op in ${OP_${class}}){
          $for(w in ${int_mem_widths}){
            "${op}_${w}_C1_C1_${clust}.${idx}"(alt(SA_${class}_C1_${clust}_m${idx}));
          }
        }
      }

      // Vector float load ops
      $for(class in vec_floatload vec_floatloadgdisp vec_floatload_elem vec_floatloadgdisp_elem){
        $for(op in ${OP_${class}}){
          $for(w in ${float_widths}){
            "${op}_${w}_C1_C1_${clust}.${idx}"(alt(SA_${class}_C1_${clust}_m${idx}));
          }
        }
      }

      // Vector integer store ops
      $for(class in vec_intstore vec_intstoregdisp vec_intstore_elem vec_intstoregdisp_elem){
        $for(op in ${OP_${class}}){
          $for(w in ${int_mem_widths}){
            "${op}_${w}_C1_${clust}.${idx}"(alt(SA_${class}_${clust}_m${idx}));
          }
        }
      }

      // Vector float store ops
      $for(class in vec_floatstore vec_floatstoregdisp vec_floatstore_elem vec_floatstoregdisp_elem){
        $for(op in ${OP_${class}}){
          $for(w in ${float_widths}){
            "${op}_${w}_C1_${clust}.${idx}"(alt(SA_${class}_${clust}_m${idx}));
          }
        }
      }
    }

    $for (idx in $0..(vec_integer_perm_units-1)){
      $for (class in vec_intperm){
        $for (op in ${OP_${class}}){
          "${op}_${clust}.${idx}"(alt(SA_${class}_int_${clust}_PI${idx}));
        }
      }
    }

  //$for (idx in $0..(vec_float_perm_units-1)){
    $for (idx in $0..(vec_integer_perm_units-1)){
      $for (class in vec_floatperm){
        $for (op in ${OP_${class}}){
          $for(w in ${float_widths}){
            "${op}_${w}_${clust}.${idx}"(alt(SA_${class}_float_${clust}_PF${idx}));
          }
        }
      }
    }
  } // end {clust}

}

SECTION Pattern_Node_Flags
{
}

SECTION Pattern_Edge
{
}

SECTION Pattern_Node
{
}

SECTION Customop_Graph
{
}

SECTION Custom_Operation
{
}
